// Define Stopwatch blueprint (class equivalent)
Stopwatch: <[
  $isRunning: false,
  $isPaused: false,
  $startTime: 0,
  $pausedTime: 0,
  $totalPausedTime: 0,
  $timeElapsed: 0,

  start: (
    $self.isRunning <: true;
    $self.isPaused <: false;
    $self.startTime <: now();
  ),

  pause: (
    $self.isRunning <: false;
    $self.isPaused <: true;
    $self.pausedTime <: now();
  ),

  resume: (
    $self.isRunning <: true;
    $self.isPaused <: false;
    $self.totalPausedTime + (now() - $self.pausedTime) :> $self.totalPausedTime;
  ),

  reset: (
    $self.isRunning <: false;
    $self.isPaused <: false;
    $self.startTime <: 0;
    $self.pausedTime <: 0;
    $self.totalPausedTime <: 0;
    $self.timeElapsed <: 0;
  ),

  elapsed: (
    if $self.isRunning,
      now() - $self.startTime - $self.totalPausedTime :> $self.timeElapsed;
    end;
    return($self.timeElapsed);
   ),

  display: (
    $time: $self.elapsed();
    $seconds: ($time / 1000) % 60;
    $minutes: floor(($time / 1000) / 60);

    if $seconds less than 10,
      return("<$minutes>:0<$seconds>");
    else,
      return("<$minutes>:<$seconds>");
    end;
  )
]>;

// Instantiate stopwatch instances
$stopwatch-group: [];
$stopwatch-iter: 1;

spawnStopwatch: (
  $stopwatch-group.$stopwatch-iter <: Stopwatch[];
  $stopwatch-iter + 1 :> $stopwatch-iter;
);

// Example usage:
spawnStopwatch(); // create first stopwatch
$stopwatch-group.1.start();
wait(5000); // hypothetical wait function
$stopwatch-group.1.pause();

say($stopwatch-group.1.display()); // prints "0:05.00"

$stopwatch-group.1.resume();
wait(3000);
$stopwatch-group.1.pause();

say($stopwatch-group.1.display()); // prints "0:08.00"

$stopwatch-group.1.reset();
say($stopwatch-group.1.display()); // prints "0:00.00"
