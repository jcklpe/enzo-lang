# ──────────────────────────────────────────────────────────────────────────────
# grammar.lark
# ──────────────────────────────────────────────────────────────────────────────

# Top‐level: one or more statements, separated (and optionally
# terminated) by semicolons (“;”).  Newlines are not significant here—
# only “;” really ends a statement.
?start: stmt (";" stmt)* ";"?

# A single statement is either an assignment form or a bare expression.
?stmt: assign_stmt
     | return_stmt
     | expr              -> expr_stmt

return_stmt: "return" "(" expr ")" ";"

# ── assignment forms ─────────────────────────────────────────────────────────
?assign_stmt: NAME ":"            -> bind_empty      // e.g. “$x:;” with no right‐hand side
            | NAME ":"  expr       -> bind            // normal bind with an expression
            | NAME "<:" expr       -> rebind
            | expr "<:" expr       -> prop_rebind
            | expr ":>" NAME       -> rebind_lr

# ── full expression precedence ────────────────────────────────────────────────
?expr: sum

?sum: product
    | sum "+" product             -> add
    | sum "-" product             -> sub

?product: postfix
        | product "*" postfix     -> mul
        | product "/" postfix     -> div

# ── postfix handles “.INT” (list‐index), “.$foo” (var‐index), or “.foo” (prop‐access)
?postfix: primary ( DOTINT | DOTVAR | DOTPROP )*    -> index_chain

?primary: list
        | table
        | function                -> function
        | call                    -> call
        | SIGNED_NUMBER           -> number
        | STRING                  -> string
        | NAME                    -> var
        | "(" expr ")"            -> paren

# ── function literal ──────────────────────────────────────────────
# Allow single-line functions and multi-line functions, both with params
function: "(" function_core ")"

# Multi-line: params must use 'param'
# Single-line: allow just NAME : expr pairs separated by commas/semicolons
function_core: function_param_list ";" function_body_stmts
             | function_body_stmts         // body only, no params

function_param_list: function_param ("," function_param)* [","]
function_param: "param" NAME ":" expr    // multi-line param
              | NAME ":" expr            // single-line param (for anon fns)

function_body_stmts: stmt*    // multi-line body

# ── function call ────────────────────────────────────────────────
call: NAME "(" [call_args] ")"
call_args: expr ("," expr)* [","]

# ── list literal ─────────────────────────────────────────────────────────────
list: "[" [expr_list] "]"         -> list
expr_list: expr ("," expr)* [","]

# ── table literal ────────────────────────────────────────────────────────────
table: "{" [kvpair_list] "}"      -> table
kvpair_list: kvpair ("," kvpair)* [","]
kvpair: KEY ":" expr

# ── tokens ───────────────────────────────────────────────────────────────────
NAME:    /\$[a-zA-Z0-9_-]+/            // e.g.  $foo, $bar_123
KEY:     /\$[a-zA-Z0-9_-]+/            // same pattern, used inside tables

DOTINT.5:   /\.[1-9][0-9]*/            // “.1”, “.42”  1‐based numeric indexing
DOTVAR.6:   /\.[$][a-zA-Z0-9_-]+/      // “.$foo”
DOTPROP.7:  /\.[a-zA-Z][a-zA-Z0-9_-]*/ // “.foo”  (property‐access)

%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING   -> STRING
%import common.WS_INLINE

# ── ignore spaces/tabs, single‐line “//” comments, and newlines ───────────────
%ignore WS_INLINE
%ignore /\/\/[^\n]*/
%ignore /[\r\n]+/
