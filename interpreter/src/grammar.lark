# ──────────────────────────────────────────────────────────────────────────────
# grammar.lark
# ──────────────────────────────────────────────────────────────────────────────

# Top‐level: one or more statements, separated (and optionally
# terminated) by semicolons (“;”).  Newlines are not significant here—
# only “;” really ends a statement.
?start: stmt (";" stmt)* ";"?

# A single statement is either an assignment form or a bare expression.
?stmt: assign_stmt
     | return_stmt
     | expr              -> expr_stmt

return_stmt: "return" "(" expr ")" ";"

# ── assignment forms ─────────────────────────────────────────────────────────
?assign_stmt: NAME ":"            -> bind_empty      // e.g. “$x:;” with no right‐hand side
            | NAME ":"  expr       -> bind            // normal bind with an expression
            | NAME "<:" expr       -> rebind
            | expr "<:" expr       -> prop_rebind
            | expr ":>" NAME       -> rebind_lr

# ── full expression precedence ────────────────────────────────────────────────
?expr: sum

?sum: product
    | sum "+" product             -> add
    | sum "-" product             -> sub

?product: postfix
        | product "*" postfix     -> mul
        | product "/" postfix     -> div

# ── postfix handles “.INT” (list‐index), “.$foo” (var‐index), or “.foo” (prop‐access)
?postfix: primary ( DOTINT | DOTVAR | DOTPROP )*    -> index_chain

?primary: list
        | table
        | block_expr              -> block_expr
        | call                    -> call
        | SIGNED_NUMBER           -> number
        | STRING                  -> string
        | NAME                    -> var

##############################################################################
# BLOCK EXPRESSION:
#   - Every parenthesis is a new scope/block.
#   - Params and statements can be separated by "," or ";" (or mixed).
#   - Both:
#         ($x: 1, $y: 2; $x + $y);
#         ($x: 1; $y: 2; $x + $y);
#     ...are valid and treated identically.
#   - Multi-line forms are also supported:
#         (
#            $x: 1,
#            $y: 2;
#            return($x + $y);
#         );
##############################################################################

# All parens become block_expr, with any order/combination of bindings, params, statements (including return), and expressions.
block_expr: "(" block_body ")"
block_body: block_item (block_sep block_item)* block_sep?
block_item: block_binding
          | param_binding
          | return_stmt
          | expr
block_binding: NAME ":" expr
param_binding: "param" NAME ":" expr
block_sep: "," | ";"

# ── function call ────────────────────────────────────────────────
call: NAME "(" [call_args] ")"
call_args: expr ("," expr)* [","]

# ── list literal ─────────────────────────────────────────────────────────────
list: "[" [expr_list] "]"         -> list
expr_list: expr ("," expr)* [","]

# ── table literal ────────────────────────────────────────────────────────────
table: "{" [kvpair_list] "}"      -> table
kvpair_list: kvpair ("," kvpair)* [","]
kvpair: NAME ":" expr

# ── tokens ───────────────────────────────────────────────────────────────────
NAME:    /\$[a-zA-Z0-9_-]+/

DOTINT.5:   /\.[1-9][0-9]*/            // “.1”, “.42”  1‐based numeric indexing
DOTVAR.6:   /\.[$][a-zA-Z0-9_-]+/      // “.$foo”
DOTPROP.7:  /\.[a-zA-Z][a-zA-Z0-9_-]*/ // “.foo”  (property‐access)

%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING   -> STRING
%import common.WS_INLINE

# ── ignore spaces/tabs, single‐line “//” comments, and newlines ───────────────
%ignore WS_INLINE
# %ignore /\/\/[^\n]*/
%ignore /[\r\n]+/
