//= SIMPLE IF TEST
"Ready!"

//= IF CONDITION NOT MET and not
"this should print"

//= ELSE TEST
"Fallback triggered"

//= NOT CONDITION FALSE
"this should print"

//= IS VALUE MATCH TRUE and False
"Matched blue"

//= IS TYPE MATCH TRUE
"It's a number"

//= IS TYPE MATCH FALSE
//= IS EMPTY MATCH
"Empty detected"

//= LESS THAN TRUE and FALSE
"Less than 10"

//= GREATER THAN TRUE and FALSE
"Greater than 10"

//= AT MOST (<=) TRUE and FALSE
"At most 10"

//= AT LEAST (>=) TRUE and FALSE
"At least 10"

//= CONTAINS TRUE and FALSE
"Contains 2"

//= AND
"Both conditions true"

//= OR
"At least one true"

//= ELSE IF FIRST MATCH
"First match"

//= ELSE IF SECOND MATCH
"Second match"

//= ELSE IF FALLBACK MATCH
"Fallback matched"

//= MULTI-BRANCH SWITCH
"B matched"

//= MULTI-BRANCH WITH DEFAULT (Otherwise FALLBACK)
"Fallback fruit"

//= MULTI-BRANCH TYPE GUARD MATCHING
"Big number"

//= MULTI-BRANCH TYPE MATCH WITH VARIANT
"Ice type matched"

//= MULTI-BRANCH CONTAINS MATCH
"Key found"

//= MULTI-BRANCH COMPOUND LOGIC
"Small number matched"

//= MULTI-BRANCH LIST EXACT MATCH
"Exact List matched"

//= MULTI-BRANCH WITH VARIANT GROUP
"Goblin matched"

//= INLINE IF TRUE and FALSE
"Go!"
"Wait!"



//= BOOLEAN EDGE CASE FALSE CONDITIONS
"will print"
"will print"
"will print"
"will print"
"will print"
"will print"

//= BOOLEAN EDGE CASE TRUE CONDITIONS
"True variant group"
"True variant value"
"True text atom"

//= Function Atom as condition
"Will print"
"Will print"

//= IF WITH FUNCTION RETURNING EMPTY (FALSY)
"Empty function result"

//= IF WITH FUNCTION RETURNING NON-EMPTY (TRUTHY)
"Non-empty function result"

//= IF WITH VARIABLE SET TO EMPTY LIST THEN MUTATED TO TRUTHY LIST
"List became truthy"

//= IF WITH VARIABLE SET TO TEXT "0" (TRUTHY)
"Text '0' is truthy"

//= IF WITH VARIABLE SET TO NUMBER 0.0 (FALSY)
"0.0 is falsy"

//= IF WITH EMPTY BLUEPRINT INSTANCE (TRUTHY)
"Empty blueprint is falsy!"

//= IF WITH VARIABLE SET TO STATUS.FALSE THEN MUTATED TO CUSTOM STATUS (TRUTHY)
"Custom status is truthy"

//= MULTI-BRANCH MATCH WITH SECOND TRUTHY MATCH
"Second matched"

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ONLY FIRST EXECUTES
"At least 5 matched"

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ALL EXECUTE
"At least 5 matched"
"generic number should print"

//= ERROR CASE: USING UNDEFINED VARIABLE IN IF
error: undefined variable
	If $undefined-var, ( // error: undefined variable

//= ERROR CASE: INVALID COMPARISON TYPE
error: can't compare List with Number
	If $list-contain is less than 10, (

//= ERROR CASE: INVALID USE OF "CONTAINS" ON NON-LIST
"Will print"

//= ERROR CASE: INVALID MULTI-BRANCH "or" WITHOUT PRECEDING IF
error: `or` without preceding `If`
	or "value", ( // error: `or` without preceding `If`

//= ERROR CASE: ELSE IF WITHOUT INITIAL IF
error: `Else if` without preceding `If`
	Else if $color is "blue", ( // error: `Else if` without preceding `If`

//= ERROR CASE: ELSE WITHOUT INITIAL IF
error: `Else` without preceding `If`
	Else, ( // error: `Else` without preceding `If`

//= BOOLEAN TEST: LIST WITH ALL FALSY ELEMENTS
"All falsy elements in a List are falsy"

//= BOOLEAN TEST: TEXT WITH WHITESPACE ONLY (TRUTHY)
"Whitespace text is truthy"

//= BOOLEAN TEST: VARIABLE WITH EMPTY BLUEPRINT VARIANT (TRUTHY)
"Empty variant is truthy"

//= BOOLEAN TEST: EMPTY PARAMETERIZED FUNCTION (FALSY)
"Empty parameterized function is falsy"

//= INLINE IF WITH VARIABLE SET TO NUMBER 1 (TRUTHY)
"Number 1 is truthy"

//= INLINE IF WITH EMPTY LIST (FALSY)
"Empty List falsy"

//= DESTRUCTURE IN IF CONDITION (Truthy)
"Eve is over 21"

//= DESTRUCTURING BY REFERENCE AND MUTATION IN CONTROL FLOW
100

//= MULTI-STAGE PIPELINE WITH CONDITIONAL STEP ERROR
error: comparison word in pipeline
	$list-pipe
	then ($this contains 4) :> $contains-four;

//= Has function and pipeline
"List contains four"

//= IF CONDITION WITH LIST INDEX ACCESS
"Second index matched 'one'"
"Third index is not 'one'"

//= LIST MAPPING WITH CONTROL FLOW CONDITION
"alice is active"

//= LIST MAPPING AND PIPELINE INTO CONTROL FLOW
"User active status: yes"

//= BLUEPRINT DEFAULTS IN CONTROL FLOW
"Hero at full health"

//= ERROR: IF CONDITION ACCESSING INVALID LIST INDEX
error: List index out of range
	If $bad-list50.4, ( // error: List index out of range

//= ERROR: IF CONDITION ON UNDEFINED PROPERTY IN LIST
error: List property not found: $age
	If $user-bad.age, ( // error: List property `$age` not found

//= More destructuring stuff and conditionals stuff
"Pass: positional destructure"

//= multiple statements in an inline if
"passing one statement from inline If"
"passing a second one"
5
6

//= IF WITH NESTED CONDITIONALS
"Nested condition true"

//= PIPELINE WITH INLINE FUNCTION RETURNING EMPTY (FALSY)
"Pipeline resulted in empty"

//= BOOLEAN TEST: NESTED LIST WITH TRUTHY AND FALSY ELEMENTS
"Nested List considered truthy"

//= ERROR: USING "is" WITH A VARIANT THAT DOES NOT EXIST
error: undefined variable
	If $status-bp is StatusVariantBP.Unknown, (// error: undefined variable
//= Conditional pipelining
0
"dead"

//= IF CONDITION WITH NESTED LIST INDEX ACCESS
"Nested index matched 'two'"
