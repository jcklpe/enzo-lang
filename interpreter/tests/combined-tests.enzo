//= INVOKING AN UNDEFINED VARIABLE
$undefinedVar;      // error: undefined: $undefinedVar

//= EMPTY BIND ────────────────────────────────────────────────────────────
$x: ;

//= REDECLARING A VARIABLE (USING “:”) ERRORS ────────────────────────────
$x: 10;             // error $x has already been declared

//= REBINDING WITH “<:” AND INVOKING ───────────────────────────────────────
$x <: 100;
$x;                 // prints 100
$x <: "hello";      // error: cannot assign Text to Number

//= FULL BIND UPFRONT LOCKING TYPE ──────────────────────────────────────────
$z: 7;       // binds 7
$z;         // prints 7
$z <: 8;            // rebind OK, z now 8
$z;             // prints 8
$z <: "oops";       // error: cannot assign Text to Number
$z : "oops";       // error: $z already defined

//= MIXED‐CASE VARIABLE NAMES ───────────────────────────────────────────
$Var123: 10;
$Var123;                  // prints “10”
$var-xyz: 20;
$var-xyz;                 // prints “20”
($Var123 + $var-xyz);       // prints “30”
$var_xyz: 30;
$var_xyz;                 // prints “30”

//= REBINDING WITH “:>” IMPLICITLY BINDS IF NEEDED ────────────────────────
55 :> $newImplicit;
$newImplicit;               // prints “55”
$newImplicit <: "oops";     // error: cannot assign Text to Number
$dougie <: "cool dude";     // should not error.
$dougie;                    // prints "cool dude".

//= MULTIPLE ASSIGNMENTS ON ONE LINE ────────────────────────────────────
$u: 1; $v: 2; ($u + $v);    // prints “3”
$apples:1;$bananas:2; ($apples+$bananas);       // prints 3
$apricot :  1 ; $boranges: 2;        // spacing should not break anything
$boranges;

//= Var naming
$123abc: 5;
$123abc; // prints 5
$_: 9;
$_; // prints 9
$-foo: 3;
$-foo;        // prints 3

//= LIST STUFF & INDEX ERRORS ─────────────────────────────────────────────
$emptyListTest: []; // binds []
$emptyListTest;    // prints “[ ]”
$emptyListTest.1;  // error: list index out of range

//= BIND EMPTY AND THEN FILL WITH LIST ────────────────────────────────────
$empty-list: ;
$empty-list: 50;    //error: $empty-list already defined
$empty-list<: ["now not empty"];  //bind contents to list
$empty-list;       // prints “[ "now not empty" ]”

//= DECLARE LIST AND ACCESS ITEMS ────────────────────────────────────────
$colors: ["red", "green", "blue", "yellow"]; // binds list
$colors.3;         // prints “blue”
$i: 2;             // binds 2
$colors.$i;        // prints “green”

//= NESTED LISTS WITH INDEXING ────────────────────────────────────────────
$nestedList: [[1, 2], [3, 4]];
$nestedList.2.1;   // prints “3”

//= MIXED LIST‐INSIDE‐LIST ● INDEX VS ATTR ──────────────────────────────
$mix: [ $lst: ["a", "b", "c"] ];  //binds list
$mix.lst.2;                // prints “b”

//= LIST OF LISTS + INDEX OF LIST ────────────────────────────────────
$lol-index: [ [ $x: 5 ], [ $x: 7 ] ];  // binds list
$lol-index;                 // prints “[ [ $x: 5 ], [ $x: 7 ] ]”
$lol-index.2.x;             // prints “7”

//= Out-of-bounds and weird list indices
$list: [1,2,3];     // binds list
$list;
$list.0;            // error: list index out of range
$list.4;            // error: list index out of range
$list.-1;           // error: list index out of range
$list."foo";        // error: can't use text as index or keyname
$list.1.1;          // error: list index out of range

//= List mutation
$mutable: [1,2];
$mutable;
$mutable.1 <: 5;        // updates first element to 5
$mutable;               // prints [ 5, 2 ]
$mutable.3 <: 9;        // error: list index out of range

//= Trailing commas
// These are fine
$goodList-index: [1, 2, 3, ]; // binds list
$goodList-index;              // prints  [ 1, 2, 3 ]
// these should error
$badList1-index: [1,,2];                        // error: remove one comma
$badList2-index: [,1,2];                        // error: leading comma
$badList3-index: [,];                           // error: just comma

//= Various type errors
$notalist: "oops";
$notalist;
$notalist.1;                              // index applies to lists

//= BINDING MATH OPERATIONS ────────────────────────────────────────────────
$math1: 100;    // binds 100
$math1;            // prints 100
$math2: (3 + 2);          // binds a function atom
$math2; // prints 5
($math1 + $math2);            // prints 105

//= ARITHMETIC PRECEDENCE CHECK ─────────────────────────────────────────────
$precedence-check: (2 + 3 * 4);      // binds a function atom
$precedence-check;                 // prints 14

$precedence-check2: ((2 + 3) * 4);    // binds a function atom
$precedence-check2;                 // prints 20

//= PARENTHESIZED EXPRESSIONS AS STAND‐ALONE ─────────────────────────────
(10 + 5);                 // prints “15”

//= LARGE NUMBERS + NEGATIVE NUMBERS ────────────────────────────────────
$big: 1234567890;         // binds “1234567890”
$big;                     // prints “1234567890”
$neg: -5;                 // binds “-5”
$neg;                     // prints “-5”
($neg * 2);                 // prints “-10”
$negzero: -0;             // binds 0 (should not crash)
$negzero;                 // prints 0 (should not crash)
$weird: --5;              // error: double minus not allowed

//= LIST MAPPING STUFF ───────────────────────────────────────────────────────────
$list-map: [ $name: "Alice", $age: 30 ];
$list-map;             // binds “[ $name: "Alice", $age: 30 ]”
$list-map.name;        // prints “Alice”
$list-map.age;         // prints “30”

//= REBINDING LIST PROPERTIES ────────────────────────────────────────────
$list-map.name <: "Bob";
$list-map.name;        // prints “Bob”
$list-map;             // prints “[ $name: "Bob", $age: 30 ]”

//= ANOTHER LIST + PROPERTY REBIND ───────────────────────────────────────
$list-map2: [ $foo: 42, $bar: "hello" ];
$list-map2;
$list-map2.bar;        // prints “hello”
$list-map2.foo <: 100;
$list-map2.foo;
$list-map2;            // prints “[ $foo: 100, $bar: "hello" ]”

//= EMPTY LIST LITERAL + BAD PROP ACCESS ERROR ──────────────────────────
$emptyListMap: [];
$emptyListMap;            // prints “[ ]”
$emptyListMap.someKey;    // error: Keyname '$someKey' does not exist on this list

//= NESTED LIST + MIXED INDEX/PROPERTY ───────────────────────────────────────
$nestedListMap: [
    $inner: [
        $val: 42,
        $arr: [10, 20]
    ]
];
$nestedListMap;
$nestedListMap.inner.val;     // prints “42”
$nestedListMap.inner.arr.2;   // prints “20”

//= REBINDING NESTED LISTS ───────────────────────────────────────────────
$nestedListMap.inner.val <: 100;
$nestedListMap.inner.val;     // prints “100”

//= COMPLEX LIST INDEX/PROPERTY ACCESS ─────────────────────────
$complex: [
    $list-map: [ $a: [100, 200], $b: "x" ],
    $list-index: [ [ $foo: 1 ], [ $foo: 2 ] ]
];
$complex;           // prints [ $list-map: [ $a: [ 100, 200 ], $b: "x" ], $list-index: [ [ $foo: 1 ], [ $foo: 2 ] ] ]
$complex.list-map.a.1;    // prints “100”
$complex.list-index.2.foo;  // prints “2”

//= LIST OF LISTS + INDEX OF LIST ─────────────────────────────────────
$lol: [ $first: [1, 2], $second: [3, 4] ];
$lol;
$lol.first.2;         // prints “2”
$lol.second;          // prints “[ 3, 4 ]”

//= MORE LIST WEIRDNESS
$deep-list: [ $x: [ $y: [ $z: 7 ] ] ];
$deep-list;            // prints [ $x: [ $y: [ $z: 7 ] ] ]
$deep-list.x.y.z; // prints 7

//= List property errors
$list9: [ $foo: 1 ];
$list9;                // prints [ $foo: 1 ]
$list9.bar;         // error: list property '$bar' not found
$list9.1;           // prints 1
$list9.foo.bar;     // error: list property '$bar' not found

$prim: 999;
$prim;                      // prints 999;
$prim.someKey <: 5;       // error: list property '$someKey' not found

$myList: [ $a: 1 ];
$myList;                    // prints [ $a: 1 ]
$myList.1;                 // prints 1

$table-error: [ $x: 1 ];
$table-error;                   // prints [ $x: 1 ]
$table-error.x <: 99;           // rebinds 99 to $table-error.x
$table-error.x;                 // prints 99
$table-error;                   // prints [ $x: 99 ]
$table-error.y <: 42;           // error: list property '$y' not found

//= Valid trailing commas (should succeed)
$goodList: [ $foo: 1, $bar: 2, ];
$goodList;

//= invalid trailing commas (should error)
$badList1: [ $foo: 1,, $bar: 2 ];
$badList2: [ ,$foo: 1, $bar: 2 ];
$badList3: [ , ];

//= TEXT + INTERPOLATION ───────────────────────────────────────────────────
$text-example: ;
$text-example <: "rebinding this text and ";
$text-example;
$text-example2: "this is text example 2";
$text-example2;

"just a plain text";   // prints “just a plain text”

"<$text-example; $text-example2;>";   // prints “rebinding this text and this is text example 2”
$math1-interp: 100;
$math1-interp;
$math2-interp: 5;
$math2-interp;
"<$math1-interp;> plus <$math2-interp;> is: <($math1-interp + $math2-interp);>";           // prints “100 plus 5 is: 105”

//= NOW THAT $colors & $i ARE DEFINED, INTERPOLATE A STRING THAT USES THEM ─
$index-interp: 2;
$index-interp;
$colors-interp: ["red", "purple", "green", "silver"];
$colors-interp;
$text-about-colors-list: "color <$index-interp;> is <$colors-interp.$index-interp;>";
$text-about-colors-list;   // prints “color 2 is purple

//= COMPLEX MATH INTERPOLATION ● MULTIPLE EXPRESSIONS ───────────────────
$x <: 7;
$x;
$y <: 3;
$y;
"Sum=<($x + $y);> Prod=<($x * $y);>";   // prints “Sum=10 Prod=21”

//= COMPOUND INTERPOLATION WITH LIST ACCESS ────────────────────────
$myList-text: [ $greeting: "hi", $nums: [2, 4] ];
$myList-text;
"<$myList-text.greeting;>! The nums are:<$myList-text.nums.1;>, and <$myList-text.nums.2;>";
                         // prints “hi! The nums are: 2,4”

//= Unicode and weird strings
$str: "π≈3.14";
$str;                   // prints π≈3.14
$esc: "foo\nbar";       // binds foo\nbar
$esc;
$esc2: "foo\"bar\"baz";
$esc2;                  // prints foo"bar"baz

//= Interpolation errors
"text <bad syntax>";    // error: undefined variable or parse error in interp
"hello <$foo + >";      // error: parse error in interpolation
"hello <<$foo>>";       // error: nested <...> not allowed (for now)

// ── FUNCTIONS  -------------------
//= Empty function atom
();  // prints nothing
//= Function atom with just a single value
(6);  // prints 6

//= Function atom with single variable and implicit return
($foo: 99; $foo); // prints 99

//= Nested function atoms
(($x: 2; $y: 3; $x * $y);); // prints 6
(($x: 3; $y: 3; $x * $y)); // prints 9
//= Function atom one liner with implicit return
($x: 3, $y: 2; $x + $y);   // prints 5
($x: 3; $y: 3; $x + $y);   // prints 6
// (both commas and semicolons work for breaking up variables in single line statements)

//= Function with only a return statement (multi-line)
(
    return(123);
); // prints 123

//= Multiline function atom with explicit return
(
$x: 100;
$y: 100;
return(($x + $y));

); // prints 200

//= Multiline function atom with explicit return 2
($x: 101;
$y: 100;
return(($x + $y));); // prints 201

//= Multiline nested function atoms
(
    $a: 10;
    $b: 20;
    return((
        $c: 2;
        return(($a + $b + $c));
    ));
); // prints 32

//= Single line, implicit return, named function
times2: (2 * 2); // binds (2 * 2) to the times2 keyname
"this is the normal function call;";
times2();       // prints 4
"this is the $times2 style function call;";
$times2;       // prints 4
"this is the $times2(); style function call";
$times2();       // prints 4

//= Nameless function: multi-line with no explicit return (should error)
($x: 1;
 $y: 2;
 $x + $y;
);         // error: no explicit return in multi-line function

//= Multi-line with params and default values
adder: (
param $x: 6; // these are default values
param $y: 6;
return(($y + $x));
);

adder();                       // prints 12
$adder();                      // prints 12
$adder;                      // prints 12

//= passing functions as references
$referenced-function: @adder;  // does not invoke adder function just saves it to another variable as a reference
$referenced-function();        // prints 12
adder(4, 5);                   // prints 9
adder(4, 5, 6);                // error: too many args
$adder("", 500);               // error: expected argument is a number atom, not a text atom
$referenced-function(300, 5);    // prints 305

//= Named function with local variable
adder-plus-1: (
    param $x: 6;
    param $y: 4;
    $z: 1;
    return($x + $y + $z);
);

adder-plus-1();    // prints 11
adder-plus-1(2, 2);   // prints 5

//= Subtraction with empty default
$subtractor: (
    param $x: ;
    param $y: ;
    return($x - $y);
);

subtractor(3, 2);   // prints 1
$subtractor(3, 4);   // prints 1
subtractor();        // error: missing necessary params

$subtractor(4);   //error: missing necessary params
//= List of functions called by index
$funs: [(param $x: ; $x + 1;), (param $x: ; $x * 2;)];
$funs.1(10);              // → 11
$funs.2(10);              // → 20

//= Named function, then function reference and direct invocation
double: (param $x: 2; $x * 2);
$ref: @double;       // should NOT invoke — should just bind the function object
$ref(5);             // → 10

// Direct invocation should work too:
double(3);           // → 6

// Function reference must use $, no parens:
double;              // error: expected function reference (@) or function invocation ($)
//= Higher-order function: passing function as argument and using default argument
apply: (
    param $function-arg:;
    param $value: 7;
    return($function-arg($value));
);

apply(@double, 4);   // → 8
apply(@double);      // → 14 (default $val: 7)

apply(double, 4);    // error: expected function reference (@) or function invocation ($)

//= List with function member and self mutation
$counter: [
    $count: 10,
    increment: (
        $self.count + 1 :> $self.count;
        return($self.count);
    )
];
$counter.count;      // → 10
$counter.increment();      // → 11
$counter.increment();      // → 12
$counter.count;      // → 12
@counter.increment;        // function doesn't invoke, just returns the counter.increment function as a reference.

//= List of functions: referencing as variables
$list-reference: [
    $add-one: (
        param $x: 10;
        return($x + 1);
    )
];
$referencing-function: @list-reference.add-one;      // should be a function reference, not invoked
$referencing-function();              // → 11
$referencing-function(5);             // → 6

//= Nested function: inner function shadows param
outer: (
    param $x: 10;
    inner: (
        param $y: 5;
        return(($x + $y));
    );
    return($inner(7));
);
outer();             // → 17
outer(20);           // → 27

//= Duplicate param name error in function declaration
duplicate-params: (
    param $x: 1;
    param $x: 2; // error: duplicate parameter name '$x' in function definition
    return($x);
);

//= Empty function declaration and call
empty-fn: ();
empty-fn();     // returns empty.

//= Function with default param referencing previous param
sum-default: (
    param $a: 5;
    param $b: $a;
    return(($a + $b));
);
sum-default();            // → 10
sum-default(2);           // → 4
sum-default(2, 10);       // → 12

//= function atoms and pipes
// Single-line anonymous function returns 6
($x: 1, $y: 5; $x + $y); // → 6

// simple addition
10 then ($this + 1); // returns 11

// single value function atom to function atom
(6); then ($this + 6); // → 12

// function atom with local var
6 then ($y: 10; $this + $y); // → 16

// function atom with multiple local var
6 then ($y: 10; $z: 4; $this + $y + $z); // → 20
6 then ($y: 4, $z: 5; $this + $y + $z); // → 15

// $this passed to local var
10 then ($n: $this; $n * 2); // should return 20
10 then ($this :> $n; $n * 3); // should return 30

// Global variable
$global-pipe-var: 10;
$global-pipe-var;
10 then ($this * $global-pipe-var); // should return 100
$global-pipe-var<:5;
$global-pipe-var;
10 then ($this * $global-pipe-var); // should return 50
10 then ($this + $global-pipe-var) then ($this + $global-pipe-var); // should return 20

// Pipeline with value feeding into function
($z: 5; $z); then ($y: 5; $this + $y); // → 10

// pipeline for multiple function atoms
10 then ($this + 1) then ($this + 1); // returns 12

//= Multiline function atom
10 then (
    return($this);
); // returns 10

10 then ($x: 5;
$x + $this :> $sum;
return($sum);); // returns 15

10 then (
    $y: 6;
    $x: 4;
    return(($this + $x + $y));
); // returns 20

10 then (
    $y: 6;
    $x: 4;
    return(($this + $x + $y));
) then (
    $y: 6;
    $x: 4;
    return(($this + $x + $y));
); // returns 30

10 then ($y: 6; $x: 4; $this + $x + $y) then (
    $y: 16;
    $x: 4;
    return(($this + $x + $y));
); // returns 40

//= PIPELINE ERROR: SHADOWING $this IS DISALLOWED
10 then (
    $this: 7;
    return($this * 2);
); // error: cannot declare variable '$this'

//= PIPELINE NEGATIVE NUMBER HANDLING
-5 then ($this * 2); // returns -10
-5 then (3 * $this); // returns -15

//= PIPELINE WITH TEXT INTERPOLATION
"Hello" then ("<$this>, World!"); // returns "Hello, World!"

//= PIPELINE WITH INTERPOLATION AND MATH
5 then ("double of <$this> is <($this * 2)>"); // "double of 5 is 10"

//= PIPELINE WITH LIST MANIPULATION
[1,2,3] then ($this.2); // returns 2

//= PIPELINE NESTED LIST ACCESS
[[1,2],[3,4]] then ($this.2.1 * 10); // returns 30

//= PIPELINE LIST PROPERTY
[ $val: 10 ] then ($this.val + 5); // returns 15
[ $val: 5, $val2: 10 ] then ($this.val + $this.val2); // returns 15

//= PIPELINE ERROR NO FUNCTION ATOM
5 then 10; // error: pipeline expects function atom after `then`

//= PIPELINE ERROR EMPTY FUNCTION ATOM
5 then (); // returns empty, no action

//= Complex tests
// multiline function atom, nested function invocation in return
10 then (
 $this + 1 :> $num;
 $incremented: ($num + 1);
 return(($incremented * 2));
); // should return 24

// PIPELINE INDEXED LIST ACCESS USING INTERMEDIATE CALCULATION
[10,20,30] then ($index: 2; $this.$index + 5); // returns 25

// Recursive transformation
$recursed-list: [10,20,30];
$recursed-list then ($index: 2; $this.$index + 5 :> $recursed-list.$index);
$recursed-list.2;// returns 25
