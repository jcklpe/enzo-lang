//= FOR LOOP WITH EMPTY LIST (NEVER ENTERED)
$empty-list-for: [];
For $item in $empty-list-for,
  "Never prints";
end;

$empty-list-for; // prints []

//= ERROR: FOR LOOP WITH NON-ITERABLE
For $item10 in 10, // error: for loop over non-iterable
  "Won't print";
end;

//= MULTI-BRANCH MATCH WITH FIRST TRUTHY MATCH ONLY
$multi-branch: "first";

If $multi-branch either is "first",
  "First matched"; // should print
or is "first",
  "Second matched (shouldn't print)";
end;

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ONLY FIRST EXECUTES
$multi-branch-num: 10;

If $multi-branch-num either is at least 5,
  "At least 5 matched"; // should print
or is Number,
  "Generic number matched (shouldn't print)";
end;

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ALL EXECUTE
$multi-branch-num1: 10;

If $multi-branch-num1 is at least 5,
  "At least 5 matched"; // should print
or is Number,
  "generic number should print"; // should print
end;

//= ERROR CASE: USING UNDEFINED VARIABLE IN IF
If $undefined-var, // error: undefined variable
  "Won't print";
end;

//= ERROR CASE: INVALID COMPARISON TYPE
If $list-contain is less than 10, // error: can't compare list with number comparison word
  "Won't print";
end;

//= ERROR CASE: INVALID USE OF "CONTAINS" ON NON-LIST
$non-list-val: 10;

If $non-list-val contains 1, // error: contains used on non-list
  "Won't print";
end;

//= ERROR CASE: INVALID MULTI-BRANCH "or" WITHOUT PRECEDING IF
or "value", // error: 'or' without preceding 'If'
  "Won't print";
end;

//= ERROR CASE: ELSE IF WITHOUT INITIAL IF
Else if $color is "blue", // error: 'Else if' without preceding 'If'
  "Won't print";
end;

//= ERROR CASE: ELSE WITHOUT INITIAL IF
Else, // error: 'Else' without preceding 'If'
  "Won't print";
end;

//= BOOLEAN TEST: LIST WITH ALL FALSY ELEMENTS
$list-all-falsy: [0, "", [], False];

If $list-all-falsy,
  "won't print"; // shouldn't print
end;

If not $list-all-falsy,
  "All falsy elements in a list are falsy"; // should print
end;

//= BOOLEAN TEST: TEXT WITH WHITESPACE ONLY (TRUTHY)
$text-whitespace: "   ";

If $text-whitespace,
  "Whitespace text is truthy"; // should print
end;

//= BOOLEAN TEST: VARIABLE WITH EMPTY BLUEPRINT VARIANT (TRUTHY)
EmptyVariantBP variants: Empty, or Filled;

$empty-variant: EmptyVariantBP.Empty;

If $empty-variant,
  "Empty variant is truthy"; // should print
end;

//= BOOLEAN TEST: EMPTY PARAMETERIZED FUNCTION (FALSY)
$empty-param-fn: (param $x: ;);

If $empty-param-fn,
  "Won't print";
Else,
  "Empty parameterized function is falsy"; // should print
end;

//= INLINE IF WITH VARIABLE SET TO NUMBER 1 (TRUTHY)
$inline-num: 1;

If $inline-num, "Number 1 is truthy";, Else "Won't print"; // prints truthy

//= INLINE IF WITH EMPTY LIST (FALSY)
$inline-list: [];

If $inline-list, "Won't print";, Else "Empty list falsy"; // prints falsy

//= DESTRUCTURE IN IF CONDITION (Truthy)
$person21: [$name21: "Eve", $age21: 28];
$name21, $age21: $person21[];

If $age21 is greater than 21,
  "<$name21> is over 21"; // should print "Eve is over 21"
end;

//= DESTRUCTURING BY REFERENCE AND MUTATION IN CONTROL FLOW
$player21: [$hp21: 50, $status21: "alive"];

@player21[] :> $hp21, $status21;

If $hp21 is less than 100,
  100 :> $hp21; // mutate referenced destructured variable
end;

$player21.hp; // should now be 100

//= MULTI-STAGE PIPELINE WITH CONDITIONAL STEP ERROR
$list-pipe: [1,2,3,4];

$list-pipe
then ($this contains 4) :> $contains-four;  // error: comparison word in pipeline

//= Has function and pipeline
has1: (
  param $list: ;
  param $value: ;

  If $list contains $value, return(True); Else return(False); end;
);

$list-pipe22: [1,2,3,4];

$list-pipe22 then has1($this, 4) :> $contains-four22;

If $contains-four22,
  "List contains four"; // should print
end;

//= IF CONDITION WITH LIST INDEX ACCESS
$list-index23: ["zero", "one", "two"];

If $list-index23.2 is "one",
  "Second index matched 'one'"; // should print
end;

If $list-index23.3 is "one",
  "Won't print";
Else,
  "Third index is not 'one'"; // should print
end;

//= LIST MAPPING WITH CONTROL FLOW CONDITION
$user-map: [$username: "alice", $active: "yes"];

If $user-map.active is "yes",
  "<$user-map.username> is active"; // should print "alice is active"
end;

//= LIST MAPPING AND PIPELINE INTO CONTROL FLOW
$user-map
then ($this.active) :> $is-active;

If $is-active is "yes",
  "User active status: yes"; // should print
end;

//= BLUEPRINT DEFAULTS IN CONTROL FLOW
Character: <[$hp: 100, $mana: 50]>;

$hero: Character[];

If $hero.hp is at least 100,
  "Hero at full health"; // should print
end;

//= ERROR: IF CONDITION ACCESSING INVALID LIST INDEX
$bad-list50: [1,2,3];

If $bad-list50.4, // error: list index out of range
  "Won't print";
end;

//= ERROR: IF CONDITION ON UNDEFINED PROPERTY IN LIST
$user-bad: [$name: "Bob"];

If $user-bad.age, // error: list property '$age' not found
  "Won't print";
end;

//= More destructuring stuff and conditionals stuff
$nums29: [5,6,7];

$x29, $y29, $z29: $nums29[];

If $x29 is 5 and $y29 is 6 and $z29 is 7, "Pass: positional destructure"; end;

//= multiple statements in an inline if
If True, "passing one statement from inline If"; "passing a second one"; end; // prints both lines

If True, $inline-value: 5; $inline-value; end;  // prints 5

If False, "this shouldn't print";, Else,  $inline-value2: 6; $inline-value2; end;  // prints 6

//= IF WITH NESTED CONDITIONALS
$status-nested: "outer";

If $status-nested is "outer",
  If $status-nested,
â€‹    "Nested condition true"; // should print
  end;
end;

//= PIPELINE WITH INLINE FUNCTION RETURNING EMPTY (FALSY)
empty-fn-pipeline: ();

@empty-fn-pipeline then ($this) :> $pipeline-empty;

If not $pipeline-empty,
  "Pipeline resulted in empty"; // should print
end;

//= BOOLEAN TEST: NESTED LIST WITH TRUTHY AND FALSY ELEMENTS
$nested-list66: [0, "", [0, "valid"]];

If $nested-list66,
  "Nested list considered truthy"; // should print
end;

//= ERROR: USING "is" WITH A VARIANT THAT DOES NOT EXIST
If $status-bp is StatusVariantBP.Unknown, // error: invalid variant comparison
  "Won't print";
end;

//= IF CONDITION WITH NESTED LIST INDEX ACCESS
$nested-list: [["zero", "one"], ["two", "three"]];

If $nested-list.2.1 is "two",
  "Nested index matched 'two'"; // should print
end;