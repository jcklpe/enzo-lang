//= IF CONDITION WITH LIST INDEX ACCESS
$list-index23: ["zero", "one", "two"];

If $list-index23.2 is "one",
  "Second index matched 'one'"; // should print
end;

If $list-index23.3 is "one",
  "Won't print";
Else,
  "Third index is not 'one'"; // should print
end;

//= LIST MAPPING WITH CONTROL FLOW CONDITION
$user-map: [$username: "alice", $active: "yes"];

If $user-map.active is "yes",
  "<$user-map.username> is active"; // should print "alice is active"
end;

//= LIST MAPPING AND PIPELINE INTO CONTROL FLOW
$user-map
then ($this.active) :> $is-active;

If $is-active is "yes",
  "User active status: yes"; // should print
end;

//= BLUEPRINT DEFAULTS IN CONTROL FLOW
Character: <[$hp: 100, $mana: 50]>;

$hero: Character[];

If $hero.hp is at least 100,
  "Hero at full health"; // should print
end;

//= ERROR: IF CONDITION ACCESSING INVALID LIST INDEX
$bad-list50: [1,2,3];

If $bad-list50.4, // error: list index out of range
  "Won't print";
end;

//= ERROR: IF CONDITION ON UNDEFINED PROPERTY IN LIST
$user-bad: [$name: "Bob"];

If $user-bad.age, // error: list property `$age` not found
  "Won't print";
end;

//= More destructuring stuff and conditionals stuff
$nums29: [5,6,7];

$x29, $y29, $z29: $nums29[];

If $x29 is 5 and $y29 is 6 and $z29 is 7, "Pass: positional destructure"; end;

//= multiple statements in an inline if
If True, "passing one statement from inline If"; "passing a second one"; end; // prints both lines

If True, $inline-value: 5; $inline-value; end;  // prints 5

If False, "this shouldn't print";, Else,  $inline-value2: 6; $inline-value2; end;  // prints 6

//= IF WITH NESTED CONDITIONALS
$status-nested: "outer";

If $status-nested is "outer",
  If $status-nested,
â€‹    "Nested condition true"; // should print
  end;
end;

//= PIPELINE WITH INLINE FUNCTION RETURNING EMPTY (FALSY)
empty-fn-pipeline: ();

@empty-fn-pipeline then ($this) :> $pipeline-empty;

If not $pipeline-empty,
  "Pipeline resulted in empty"; // should print
end;

//= BOOLEAN TEST: NESTED LIST WITH TRUTHY AND FALSY ELEMENTS
$nested-list66: [0, "", [0, "valid"]];

If $nested-list66,
  "Nested list considered truthy"; // should print
end;

//= ERROR: USING "is" WITH A VARIANT THAT DOES NOT EXIST
If $status-bp is StatusVariantBP.Unknown, // error: invalid variant comparison
  "Won't print";
end;

//= IF CONDITION WITH NESTED LIST INDEX ACCESS
$nested-list: [["zero", "one"], ["two", "three"]];

If $nested-list.2.1 is "two",
  "Nested index matched 'two'"; // should print
end;