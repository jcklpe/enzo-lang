//= LIST MAPPING STUFF ───────────────────────────────────────────────────────────
$list-map: [$name: "Alice", $age: 30];
$list-map;             // binds “[$name: "Alice", $age: 30]”
$list-map.name;        // prints “Alice”
$list-map.age;         // prints “30”

//= REBINDING LIST PROPERTIES ────────────────────────────────────────────
$list-map.name <: "Bob";
$list-map.name;        // prints “Bob”
$list-map;             // prints “[$name: "Bob", $age: 30]”

//= ANOTHER LIST + PROPERTY REBIND ───────────────────────────────────────
$list-map2: [$foo: 42, $bar: "hello"];
$list-map2;
$list-map2.bar;        // prints “hello”
$list-map2.foo <: 100;
$list-map2.foo;
$list-map2;            // prints “[$foo: 100, $bar: "hello"]”

//= EMPTY LIST LITERAL + BAD PROP ACCESS ERROR ──────────────────────────
$emptyListMap: [];
$emptyListMap;            // prints “[]”
$emptyListMap.someKey;    // error: Keyname '$someKey' does not exist on this List

//= NESTED LIST + MIXED INDEX/PROPERTY ───────────────────────────────────────
$nestedListMap: [
    $inner: [
        $val: 42,
        $arr: [10, 20]
]
];
$nestedListMap;
$nestedListMap.inner.val;     // prints “42”
$nestedListMap.inner.arr.2;   // prints “20”

//= REBINDING NESTED LISTS ───────────────────────────────────────────────
$nestedListMap.inner.val <: 100;
$nestedListMap.inner.val;     // prints “100”

//= COMPLEX LIST INDEX/PROPERTY ACCESS ─────────────────────────
$complex: [
    $list-map: [$a: [100, 200], $b: "x"],
    $list-index: [[$foo: 1], [$foo: 2]]
];
$complex;           // prints [$list-map: [$a: [100, 200], $b: "x"], $list-index: [[$foo: 1], [$foo: 2]]]
$complex.list-map.a.1;    // prints “100”
$complex.list-index.2.foo;  // prints “2”

//= LIST OF LISTS + INDEX OF LIST ─────────────────────────────────────
$lol: [$first: [1, 2], $second: [3, 4]];
$lol;
$lol.first.2;         // prints “2”
$lol.second;          // prints “[ 3, 4]”

//= MORE LIST WEIRDNESS
$deep-list: [$x: [$y: [$z: 7]]];
$deep-list;            // prints [$x: [$y: [$z: 7]]]
$deep-list.x.y.z; // prints 7

//= List property errors
$list9: [$foo: 1];
$list9;                // prints [$foo: 1]
$list9.bar;         // error: List property '$bar' not found
$list9.1;           // prints 1
$list9.foo.bar;     // error: List property '$bar' not found

$prim: 999;
$prim;                      // prints 999;
$prim.someKey <: 5;       // error: List property '$someKey' not found

$myList: [$a: 1];
$myList;                    // prints [$a: 1]
$myList.1;                 // prints 1

$table-error: [$x: 1];
$table-error;                   // prints [$x: 1]
$table-error.x <: 99;           // rebinds 99 to $table-error.x
$table-error.x;                 // prints 99
$table-error;                   // prints [$x: 99]
$table-error.y <: 42;           // error: List property '$y' not found

//= Valid trailing commas (should succeed)
$goodList: [$foo: 1, $bar: 2,];
$goodList;

//= invalid trailing commas (should error)
$badList1: [$foo: 1,, $bar: 2];
$badList2: [ ,$foo: 1, $bar: 2];
$badList3: [ ,];
