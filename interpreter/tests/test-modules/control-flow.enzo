//= SIMPLE IF TEST
$status-if: "ready";

If $status-if,
  "Ready!"; // should print "Ready!"
end;

//= IF CONDITION NOT MET and not
$status-if-empty: "";

If $status-if-empty,
  "Won't print"; // shouldn't print
end;

If not $status-if-empty,
  "this should print"; // should print
end;

//= ELSE TEST
$status-else: "";

If $status-else,
  "Won't print";
Else,
  "Fallback triggered"; // should print
end;

//= NOT CONDITION FALSE
$status-not2: "value";

If not $status-not2,
  "Won't print";
end;

If $status-not2,
  "this should print";
end;

//= IS VALUE MATCH TRUE and False
$color-match: "blue";

If $color-match is "blue",
  "Matched blue"; // should print
end;

If $color-match is "red",
  "Won't print";
end;

//= IS TYPE MATCH TRUE
$val-num: 42;

If $val-num is Number,
  "It's a number"; // should print
end;

//= IS TYPE MATCH FALSE
If $color-match is Number,
  "Won't print";
end;

//= IS EMPTY MATCH
$empty-val: ;

If $empty-val is Empty,
  "Empty detected"; // should print
end;

//= LESS THAN TRUE and FALSE
$num-less: 5;

If $num-less is less than 10,
  "Less than 10"; // should print
end;

If $num-less is less than 3,
  "Won't print";
end;

//= GREATER THAN TRUE and FALSE
$num-greater: 20;

If $num-greater is greater than 10,
  "Greater than 10"; // should print
end;

If $num-greater is greater than 50,
  "Won't print";
end;

//= AT MOST (<=) TRUE and FALSE
$num-at-most: 10;

If $num-at-most is at most 10,
  "At most 10"; // should print
end;

If $num-at-most is at most 9,
  "Won't print";
end;

//= AT LEAST (>=) TRUE and FALSE
$num-at-least: 10;

If $num-at-least is at least 10,
  "At least 10"; // should print
end;

If $num-at-least is at least 20,
  "Won't print";
end;

//= CONTAINS TRUE and FALSE
$list-contain: [1, 2, 3];

If $list-contain contains 2,
  "Contains 2"; // should print
end;

If $list-contain contains 5,
  "Won't print";
end;

//= AND
$status-and: "active";
$count-and: 5;

If $status-and is "active" and $count-and is 5,
  "Both conditions true"; // should print
end;

If $status-and is "inactive" and $count-and is 5,
  "Won't print";
end;

//= OR
If $status-and is "inactive" or $count-and is 5,
  "At least one true"; // should print
end;

If $status-and is "inactive" or $count-and is 10,
  "Won't print";
end;

//= ELSE IF FIRST MATCH
$status-elseif: "first";

If $status-elseif is "first",
  "First match"; // should print
Else if $status-elseif is "second",
  "Second match";
Else,
  "Fallback";
end;

//= ELSE IF SECOND MATCH
$status-elseif<: "second";

If $status-elseif is "first",
  "Won't print";
Else if $status-elseif is "second",
  "Second match"; // should print
Else,
  "Fallback";
end;

//= ELSE IF FALLBACK MATCH
$status-elseif<: "third";

If $status-elseif is "first",
  "Won't print";
Else if $status-elseif is "second",
  "Won't print";
Else,
  "Fallback matched"; // should print
end;

//= MULTI-BRANCH SWITCH
$switch-val: "B";

If $switch-val either is "A",
  "A";
or is "B",
  "B matched"; // should print
or is "C",
  "C";
end;

//= MULTI-BRANCH WITH DEFAULT (Otherwise FALLBACK)
$fruit<: "orange";

If $fruit either is "banana",
  "Banana";
or is "apple",
  "Apple";
Otherwise,
  "Fallback fruit"; // should print
end;

//= MULTI-BRANCH TYPE GUARD MATCHING
$value: 15;

If $value either is Number and is greater than 10,
  "Big number"; // should print
or is Number and is at most 10,
  "Small number";
Otherwise,
  "Not a number";
end;

//= MULTI-BRANCH TYPE MATCH WITH VARIANT
Magic-Type2 variants: Fire,
                    or Ice,
                    or Wind,
                    or Earth,
                    or Neutral;

$type-val: Magic-Type2.Ice;

If $type-val either is Magic-Type2.Fire,
  "Fire type";
or is Magic-Type2.Ice,
  "Ice type matched"; // should print
or is Magic-Type2.Wind,
  "Wind type";
Otherwise,
  "Unknown type";
end;

//= MULTI-BRANCH CONTAINS MATCH
$bag: ["coin", "key", "map"];

If $bag either contains "sword",
  "Sword found";
or contains "key",
  "Key found"; // should print
Otherwise,
  "No useful items";
end;

//= MULTI-BRANCH COMPOUND LOGIC
$compound: 3;

If $compound either is Number and is greater than 10,
  "Big number";
or is Number and is at most 5,
  "Small number matched"; // should print
or is Number,
  "Number matched";
Otherwise,
  "Fallback";
end;

//= MULTI-BRANCH LIST EXACT MATCH
$list-exact: [1,2,3];

If $list-exact either is [3,2,1],
  "Reverse matched";
or is [1,2,3],
  "Exact list matched"; // should print
Else,
  "No exact list match";
end;

//= MULTI-BRANCH WITH VARIANT GROUP
Monster-Branch variants: Goblin, or Orc, or Troll;

$monster-type1: Monster-Branch.Goblin;

If $monster-type1 is Monster-Branch.Orc,
    "Orc matched";
  or is Monster-Branch.Goblin,
    "Goblin matched"; // should print
  or is Monster-Branch.Troll,
    "Troll matched";
  Else,
    "No monster match";
end;

//= INLINE IF TRUE and FALSE
$inline-if: "ready";
If $inline-if, "Go!";, Else "Wait!"; // prints "Go!"
$inline-if<: "";
If $inline-if, "Go!";, Else "Wait!"; // prints "Wait!"

//= SIMPLE FOR LOOP
$list-for: [1,2,3];
For $item in $list-for,
  "Item: <$item>"; // prints each item
end;

//= WHILE LOOP SIMPLE
$count-while: 1;
While $count-while is less than 3,
  $count-while;
  $count-while <: $count-while + 1;
end;
$count-while; // prints 3

//= BOOLEAN EDGE CASE FALSE CONDITIONS
If 0, "Won't print"; end;
If "", "Won't print"; end;
If [], "Won't print"; end;
If [0,0,0], "Won't print"; end;
If False, "Won't print"; end;
If Status.False, "Won't print"; end;
If not 0, "will print"; end;
If not "", "will print"; end;
If not [], "will print"; end;
If not [0,0,0], "will print"; end;
If not False, "will print"; end;
If not Status.False, "will print"; end;

//= BOOLEAN EDGE CASE TRUE CONDITIONS
If Monster, "True variant group"; end; // prints
If Monster.Goblin, "True variant value"; end; // prints
If "hi", "True text atom"; end; // prints

//= Function Atom as condition
If ( ), "Won't print"; end; // empty function atom shouldn't trigger

If (4 + 5), "Will print"; end; // function with value should trigger

If (5 - 5), "Won't print"; end; // function returns 0 which is a false condition

If not (5 - 5), "Will print"; end; // function returns 0 which is a false condition