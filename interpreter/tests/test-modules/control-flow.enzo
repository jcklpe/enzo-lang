//= SIMPLE IF TEST
$status-if: "ready";

If $status-if,
  "Ready!"; // should print "Ready!"
end;

//= IF CONDITION NOT MET and not
$status-if-empty: "";

If $status-if-empty,
  "Won't print"; // shouldn't print
end;

If not $status-if-empty,
  "this should print"; // should print
end;

//= ELSE TEST
$status-else: "";

If $status-else,
  "Won't print";
Else,
  "Fallback triggered"; // should print
end;

//= NOT CONDITION FALSE
$status-not2: "value";

If not $status-not2,
  "Won't print";
end;

If $status-not2,
  "this should print";
end;

//= IS VALUE MATCH TRUE and False
$color-match: "blue";

If $color-match is "blue",
  "Matched blue"; // should print
end;

If $color-match is "red",
  "Won't print";
end;

//= IS TYPE MATCH TRUE
$val-num: 42;

If $val-num is Number,
  "It's a number"; // should print
end;

//= IS TYPE MATCH FALSE
If $color-match is Number,
  "Won't print";
end;

//= IS EMPTY MATCH
$empty-val: ;

If $empty-val is Empty,
  "Empty detected"; // should print
end;

//= LESS THAN TRUE and FALSE
$num-less: 5;

If $num-less is less than 10,
  "Less than 10"; // should print
end;

If $num-less is less than 3,
  "Won't print";
end;

//= GREATER THAN TRUE and FALSE
$num-greater: 20;

If $num-greater is greater than 10,
  "Greater than 10"; // should print
end;

If $num-greater is greater than 50,
  "Won't print";
end;

//= AT MOST (<=) TRUE and FALSE
$num-at-most: 10;

If $num-at-most is at most 10,
  "At most 10"; // should print
end;

If $num-at-most is at most 9,
  "Won't print";
end;

//= AT LEAST (>=) TRUE and FALSE
$num-at-least: 10;

If $num-at-least is at least 10,
  "At least 10"; // should print
end;

If $num-at-least is at least 20,
  "Won't print";
end;

//= CONTAINS TRUE and FALSE
$list-contain: [1, 2, 3];

If $list-contain contains 2,
  "Contains 2"; // should print
end;

If $list-contain contains 5,
  "Won't print";
end;

//= AND
$status-and: "active";
$count-and: 5;

If $status-and is "active" and $count-and is 5,
  "Both conditions true"; // should print
end;

If $status-and is "inactive" and $count-and is 5,
  "Won't print";
end;

//= OR
If $status-and is "inactive" or $count-and is 5,
  "At least one true"; // should print
end;

If $status-and is "inactive" or $count-and is 10,
  "Won't print";
end;

//= ELSE IF FIRST MATCH
$status-elseif: "first";

If $status-elseif is "first",
  "First match"; // should print
Else if $status-elseif is "second",
  "Second match";
Else,
  "Fallback";
end;

//= ELSE IF SECOND MATCH
$status-elseif<: "second";

If $status-elseif is "first",
  "Won't print";
Else if $status-elseif is "second",
  "Second match"; // should print
Else,
  "Fallback";
end;

//= ELSE IF FALLBACK MATCH
$status-elseif<: "third";

If $status-elseif is "first",
  "Won't print";
Else if $status-elseif is "second",
  "Won't print";
Else,
  "Fallback matched"; // should print
end;

//= MULTI-BRANCH SWITCH
$switch-val: "B";

If $switch-val either is "A",
  "A";
or is "B",
  "B matched"; // should print
or is "C",
  "C";
end;

//= MULTI-BRANCH WITH DEFAULT (Otherwise FALLBACK)
$fruit<: "orange";

If $fruit either is "banana",
  "Banana";
or is "apple",
  "Apple";
Otherwise,
  "Fallback fruit"; // should print
end;

//= MULTI-BRANCH TYPE GUARD MATCHING
$value: 15;

If $value either is Number and is greater than 10,
  "Big number"; // should print
or is Number and is at most 10,
  "Small number";
Otherwise,
  "Not a number";
end;

//= MULTI-BRANCH TYPE MATCH WITH VARIANT
$type-val: Magic-Type.Ice;

If $type-val either is Magic-Type.Fire,
  "Fire type";
or is Magic-Type.Ice,
  "Ice type matched"; // should print
or is Magic-Type.Wind,
  "Wind type";
Otherwise,
  "Unknown type";
end;

//= MULTI-BRANCH CONTAINS MATCH
$bag: ["coin", "key", "map"];

If $bag either contains "sword",
  "Sword found";
or contains "key",
  "Key found"; // should print
Otherwise,
  "No useful items";
end;

//= MULTI-BRANCH COMPOUND LOGIC
$compound: 3;

If $compound either is Number and is greater than 10,
  "Big number";
or is Number and is at most 5,
  "Small number matched"; // should print
or Number,
  "Number matched";
Otherwise,
  "Fallback";
end;