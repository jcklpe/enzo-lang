//= Basic loop: 1 time
$loop-iteration: 0;
Loop, (
    "There have been <$loop-iteration> loop iterations";
    $loop-iteration + 1 :> $loop-iteration;
    end-loop;
); // prints one time

//= Basic loop: 3 times
$loop-iteration<: 0;
Loop, (
    "There have been <$loop-iteration> loop iterations";
    $loop-iteration + 1 :> $loop-iteration;

    If $loop-iteration is at least 3, (
        end-loop;
    );
); // prints 3 times

//= LOOP WITH SKIP ON CONDITION
$loop-iteration<: 0;
Loop, (
    $loop-iteration + 1 :> $loop-iteration;
    If ($loop-iteration % 2) is 0, (
        // silent on even numbers
        restart-loop;
    );
    $loop-iteration; // prints odd numbers

    If $loop-iteration is at least 9, (
        end-loop;
    );
); // prints odd numbers 1-9


);

//= SIMPLE LOOP: INCREMENT INSIDE, BREAKS AFTER 5
$j-loop: 1;
Loop, (
  $j-loop;             // should print 1, 2, 3, 4, 5
  If $j-loop is 5, ( end-loop; );
  $j-loop + 1 :> $j-loop;
);

//= Loop function atom shadowing
$loop-temp: 0;
$loop-temp;
Loop, (
    $loop-temp: 10;  // not an error because this is within a function atom and can shadow
    $loop-temp; // prints 10
    end-loop;
);

$loop-temp; // prints 0 because outer variable remains unchanged by declaration.

Loop, (
    $loop-temp<: 11;  // this should rebind the outer variable, there is no shadowing here
    $loop-temp; // prints 11
    end-loop;
);

$loop-temp; // returns 11

//= Not a loop error
(
    "this function atom is not a loop";
    end-loop; // error: `end-loop;` inside a non-loop function atom
);

(
    "this function atom is not a loop";
    restart-loop; // error: `restart-loop;` inside a non-loop function atom
);

//= ERROR: UNDECLARED VARIABLE USED INSIDE LOOP
Loop, (
  $undefVar-loop;      // error: undefined variable
  end-loop;
);

//= LOOP: PIPELINING IN LOOP BODY
$p-loop: 1;
Loop, (
  $p-loop then ($this * 2) :> $p-loop;
  If $p-loop is greater than 10, ( end-loop; );
);
$p-loop; // should print 16

//= WHILE LOOP SIMPLE
$count-while: 1;
Loop while $count-while is less than 3, (
  $count-while;
  $count-while <: $count-while + 1;
);
$count-while; // prints 3

//= WHILE LOOP NEVER ENTERED (INITIAL CONDITION FALSE)
$count-never: 5;
Loop while $count-never is less than 0, (
  "Never prints";
  $count-never <: $count-never - 1;
);

$count-never; // prints 5, unchanged

//= SIMPLE FOR LOOP
$list-for: [1,2,3];
Loop for $item in $list-for, (
  "Item: <$item>"; // prints each item
);

//= FOR LOOP WITH EMPTY LIST (NEVER ENTERED)
$empty-list-for: [];
Loop for $item in $empty-list-for, (
  "Never prints";
);

$empty-list-for; // prints []

//= ERROR: FOR LOOP WITH NON-ITERABLE
$item10: 5;
Loop for $item10 in 10, ( // error: `for` loop must be over a list
  "Won't print";
);