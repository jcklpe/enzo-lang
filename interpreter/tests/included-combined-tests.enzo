// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/functions.enzo
// ── FUNCTIONS  -------------------
//nameless functions one liner with implicit return
($x: 3, $y: 2; $x + $y);   // prints 5

// nameless function multi-line
(
$x: 100;
$y: 100;
return($x + $y);
); // prints 200

($x: 1;
 $y: 2;
 $x + $y;
);         // error: no explicit return in multi-line function

($x: 101;
$y: 100;
return($x + $y);); // prints 201

2-times-2: (2 * 2); // single line named functions can use implicit returns
2-times-2();       // prints 4

adder: (
param $x: 6; // these are default values
param $y: 6;
return($y + $x);
);

adder();                       // prints 12
$adder();                      // prints 12
$referenced-function: $adder;  // does not invoke adder function just saves it to another variable as a reference
$referenced-function();        // prints 12
adder(4, 5);                   // prints 9
adder(4, 5, 6);                // error: too many args
$nada: ;
$adder($nada, 1000)            // prints 1006
$adder("", 500);               // error: arg is type number not text
$referenced-function(4, 5);    // prints 9

adder-plus-1(
    param $x: 6;
    param $y: 4;
    $z: 1;
    return($x + $y + $z);
);

adder-plus-1();    // prints 11
adder-plus-1(2, 2);   // prints 5

$subtractor: (
    param $x: ;
    param $y: ;
    return($x - $y);
);

subtractor(3, 2);   // prints 1
$subtractor(3, 2);   // prints 1
subtractor();        // prints 0 I think? empty values get coerced to 0?

$subtractor(4);   //

// List of functions
$funs: [($x: ; $x + 1;), ($x: ; $x * 2;)];
$funs.1(10);              // → 11
$funs.2(10);              // → 20

double: ($x: 2; $x * 2);
$ref: $double;       // should NOT invoke — should just bind the function object
$ref(5);             // → 10

// Direct invocation should work too:
double(3);           // → 6

// Function reference must use $, no parens:
double;              // error: function reference must use $ sigil

apply: (
    param $function-arg:;
    param $value: 7;
    return($function-arg($value));
);

apply($double, 4);   // → 8
apply($double);      // → 14 (default $val: 7)

apply(double, 4);    // error: must pass function reference with $ sigil

// table function
$counter: {
    $count: 10,
    inc: (
        $self.count <: $self.count + 1;
        return($self.count);
    )
};
$counter.inc();      // → 11
$counter.inc();      // → 12
$counter.count;      // → 12
$counter.inc;        // function doesn't invoke, just returns the counter.inc function as a reference.

// table function as a variable
$table-reference: {
    $add-one: (
        param $x: 10;
        return($x + 1);
    )
};
$referencing-function: $table-reference.add-one;      // should be a function reference, not invoked
$referencing-function();              // → 11
$referencing-function(5);             // → 6

// nested function with param name shadowing
outer: (
    param $x: 10;
    inner: (
        param $y: 5;
        return($x + $y);
    );
    return($inner(7));
);
outer();             // → 17
outer(20);           // → 27

// duplicate param declaration error
duplicate-params: (
    param $x: 1;
    param $x: 2; // error: duplicate parameter name '$x' in function definition
    return($x);
);

// empty function declaration
empty-fn: ();
empty-fn();     // returns empty.

// function default param reference previous param
sum-default: (
    param $a: 5;
    param $b: $a;
    return($a + $b);
);
sum-default();            // → 10
sum-default(2);           // → 4
sum-default(2, 10);       // → 12

// trailing comma in params multiline function declaration
trailing-comma: (
    param $x: 1, // error: trailing comma
    param $y: 2  // error: missing semicolon
    return($x + $y);
);

// Table with list of functions
$calc: {
    $ops: [($x: ; $x + 1;), ($x: ; $x * 2;)]
};
$calc.ops.2(4);           // → 8

// Table function and interpolation with self behavior
$doggie: {
    $name: "ralph",
    $age: 50,
    $speak: ("Hi, my name is <$self.name>."),
    $roll-over: (
        param $direction: "left";
        return ("I'm now spinning <$direction>."
    )
};
$doggie.speak();              // prints "Hi, my name is ralph."
$doggie.roll-over("right");   // prints "I'm now spinning right."

// functions as members of lists
$weird-member: 20;
$weird-list: [1, 2, ($x: 9; $x + 1;), ($weird-member + 1)];
$weird-list.3; // prints 10
$weird-list.4; // prints 21

// number name as a param name
number-name-param: (
    param $123: 4;
    return($123);
);
number-name-param();    // prints 4

// early exit
early-exit: (
    $a: 99;
    return($a);
    $a<: 1; // should not execute
);
early-exit(); // should return 99

// Function param name shadowing
$whatever: 42;
shadow: (
    param $whatever: 1;
    return($whatever);
);
shadow();    // prints 1 not 42

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/lists.enzo
// ── LIST STUFF & INDEX ERRORS ───────────────────────────────────────────────
$emptyListTest: [];
$emptyListTest;    // prints “[ ]”
$emptyListTest.1;  // error: list index out of range

// ── BIND EMPTY AND THEN FILL WITH LIST ─────────────────────────────────────
$empty-list: ;
$empty-list: 50;    //error: $empty-list already defined
$empty-list<: ["now not empty"];
$empty-list;       // prints “[ "now not empty" ]”

// ── DECLARE LIST AND ACCESS ITEMS ──────────────────────────────────────────
$colors: ["red", "green", "blue", "yellow"];
$colors.3;         // prints “blue”
$i: 2;
$colors.$i;        // prints “green”

// ── NESTED LISTS WITH INDEXING ─────────────────────────────────────────────
$nestedList: [[1, 2], [3, 4]];
$nestedList.2.1;   // prints “3”

// ── MIXED LIST‐INSIDE‐TABLE ● INDEX VS ATTR ────────────────────────────────
$mix: { $lst: ["a", "b", "c"] };
$mix.lst.2;                // prints “b”

// ── LIST OF TABLES + INDEX OF TABLE ────────────────────────────────────────
$lot: [ { $x: 5 }, { $x: 7 } ];
$lot;                 // prints “[ { $x: 5 }, { $x: 7 } ]”
$lot.2.x;             // prints “7”

// Out-of-bounds and weird list indices
$list: [1,2,3];
$list.0;            // error: list index out of range
$list.4;            // error: list index out of range
$list.-1;           // error: list index out of range
$list."foo";        // error: list index out of range
$list.1.1;          // error: list index out of range

// List/table mutation — mutation should be supported!
$mutable: [1,2];
$mutable.1 <: 5;        // updates first element to 5
$mutable;               // prints [ 5, 2 ]
$mutable.3 <: 9;        // error: list index out of range

// Trailing commas
// These are fine
$goodList: [1, 2, 3, ];
$goodList;
// these should error
$badList1: [1,,2];                        // error: remove one comma
$badList2: [,1,2];                        // error: leading comma
$badList3: [,];                           // error: just comma

$notalist: "oops";
$notalist.1;                              // index applies to lists

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/math.enzo
// ── BINDING MATH OPERATIONS ────────────────────────────────────────────────
$math1: 100;            // prints 100
$math2: 3 + 2;          // prints
$math1 + $math2;            // prints 105

// ── ARITHMETIC PRECEDENCE CHECK ────────────────────────────────────────────
$precedence-check: 2 + 3 * 4;      // prints 14
$precedence-check;                 // prints 14

$precedence-check2: (2 + 3) * 4;    // prints 20
$precedence-check2;                 // prints 20

// ── PARENTHESIZED EXPRESSIONS AS STAND‐ALONE ──────────────────────────────
(10 + 5);                 // prints “15”

// ── LARGE NUMBERS + NEGATIVE NUMBERS ──────────────────────────────────────
$big: 1234567890;         // prints “1234567890”
$big;                     // prints “1234567890”
$neg: -5;                 // prints “-5”
$neg;                     // prints “-5”
$neg * 2;                 // prints “-10”
$negzero: -0;             // prints 0 (should not crash)
$negzero;                 // prints 0 (should not crash)
$weird: --5;              // error: double minus not allowed

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/misc.enzo
// Redundant semicolons and whitespace
;;;;;;    // error: too many semicolons
;   ;     // error: too many semicolons

// 10. Invalid parenthesis/brackets/braces
(1 + 2;                 // error: unmatched parenthesis
[1, 2, 3;               // error: unmatched bracket
{ $a: 1, $b: 2;         // error: unmatched brace

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/tables.enzo
// ── TABLE STUFF ────────────────────────────────────────────────────────────
$table: { $name: "Alice", $age: 30 };
$table;             // prints “{ $name: "Alice", $age: 30 }”
$table.name;        // prints “Alice”
$table.age;         // prints “30”

// ── REBINDING TABLE PROPERTIES ─────────────────────────────────────────────
$table.name <: "Bob";
$table.name;        // prints “Bob”
$table;             // prints “{ $name: "Bob", $age: 30 }”

// ── ANOTHER TABLE + PROPERTY REBIND ────────────────────────────────────────
$table2: { $foo: 42, $bar: "hello" };
$table2.bar;        // prints “hello”
$table2.foo <: 100;
$table2;            // prints “{ $foo: 100, $bar: "hello" }”

// ── EMPTY TABLE LITERAL + BAD PROP ACCESS ERROR ────────────────────────────
$emptyTable: {};
$emptyTable;            // prints “{ }”
$emptyTable.someKey;    // error: 'someKey' does not exist on this table

// ── NESTED TABLE + MIXED INDEX/ATTR ────────────────────────────────────────
$nestedTable: {
    $inner: {
        $val: 42,
        $arr: [10, 20]
    }
};
$nestedTable.inner.val;     // prints “42”
$nestedTable.inner.arr.2;   // prints “20”

// ── REBINDING NESTED TABLES ────────────────────────────────────────────────
$nestedTable.inner.val <: 100;
$nestedTable.inner.val;     // prints “100”

// ── COMPLEX TABLE + LIST INDEX/PROPERTY ACCESS ─────────────────────────────
$complex: {
    $tbl: { $a: [100, 200], $b: "x" },
    $lst: [ { $foo: 1 }, { $foo: 2 } ]
};
$complex.tbl.a.1;    // prints “100”
$complex.lst.2.foo;  // prints “2”

// ── TABLE OF LISTS + INDEX OF LIST ─────────────────────────────────────────
$tol: { $first: [1, 2], $second: [3, 4] };
$tol.first.2;         // prints “2”
$tol.second;          // prints “[ 3, 4 ]”

// MORE TABLE WEIRDNESS
$deep-table: { $x: { $y: { $z: 7 } } };
$deep-table.x.y.z; // prints 7

// Table property errors
$table9: { $foo: 1 };
$table9.bar;         // error: '$bar' (not found)
$table9.1;           // error: index applies to lists
$table9.foo.bar;     // error: '$bar' (not found after foo)

$prim: 999;
$prim.someKey <: 5;       // error: can't rebind to non-existent property

$myTbl: { $a: 1 };
$myTbl.1;                 // error: index applies to lists

$tbl: { $x: 1 };
$tbl.x <: 99;           // should work if property rebinding is supported
$tbl;                   // prints { $x: 99 }
$tbl.y <: 42;           // error: '$y' not found for rebinding

// Valid trailing commas (should succeed)
$goodTable: { $foo: 1, $bar: 2, };
$goodTable;

// invalid trailing commas (should error)
$badTable1: { $foo: 1,, $bar: 2 };
$badTable2: { ,$foo: 1, $bar: 2 };
$badTable3: { , };

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/text.enzo
// ── TEXT + INTERPOLATION ───────────────────────────────────────────────────
$text-example: ;
$text-example <: "rebinding this text and ";
$text-example2: "this is text example 2";

"just a plain text";   // prints “just a plain text”

"<$text-example; $text-example2;>";   // prints “rebinding this text and this is text example 2”
$math1-interp: 100;
$math2-interp: 5;
"100 plus 5 is: <$math1-interp + $math2-interp>";           // prints “100 plus 5 is: 105”

// ── NOW THAT $colors & $i ARE DEFINED, INTERPOLATE A STRING THAT USES THEM ─
$index-interp: 2;
$colors-interp: ["red", "purple", "green", "silver"];
$text-about-colors-list: "color <$index-interp> is <$colors-interp.$index-interp>";
$text-about-colors-list;   // prints “color 2 is purple

// ── COMPLEX MATH INTERPOLATION ● MULTIPLE EXPRESSIONS ─────────────────────
$x <: 7;
$y <: 3;
"Sum=<$x + $y;> Prod=<$x * $y;>";   // prints “Sum=10Prod=21”

// ── COMPOUND INTERPOLATION WITH TABLE+LIST ACCESS ──────────────────────────
$myTable: { $greeting: "hi", $nums: [2, 4] };
"<$myTable.greeting;>! The nums are:<$myTable.nums.1;>, and <$myTable.nums.2;>";
                         // prints “hi! The nums are: 2,4”

// Unicode and weird strings
$str: "π≃3.14";
$str;                   // prints π≃3.14
$esc: "foo\nbar";       // prints foo\nbar (unless you support real newlines; for now print literal)
$esc2: "foo\"bar\"baz";
$esc2;                  // prints foo"bar"baz

// Interpolation errors
"text <bad syntax>";    // error: undefined variable or parse error in interp
"hello <$foo + >";      // error: parse error in interpolation
"hello <<$foo>>";       // error: nested <...> not allowed (for now)

// filepath: /Users/aslan/work/enzo-lang/interpreter/tests/test-modules/vars.enzo
// INVOKING AN UNDEFINED VARIABLE
$undefinedVar;      // error: undefined: $undefinedVar

// ── EMPTY BIND ─────────────────────────────────────────────────────────────
$x: ;

// ── REDECLARING A VARIABLE (USING “:”) ERRORS ──────────────────────────────
$x: 10;             // error $x has already been declared
$x: 1;              // error: $a already defined

// ── REBINDING WITH “<:” AND INVOKING ───────────────────────────────────────
$x <: 100;
$x;                 // prints 100
$x <: "hello";      // error: cannot assign Text to Number

// ── FULL BIND UPFRONT LOCKING TYPE ─────────────────────────────────────────
$z: 3 + 4;          // z = 7
$z <: 8;            // rebind OK, z now 8
$z <: "oops";       // error: cannot assign Text to Number
$z : "oops";       // error: $z already defined

// ── MIXED‐CASE VARIABLE NAMES ──────────────────────────────────────────────
$Var123: 10;
$Var123;                  // prints “10”
$var-xyz: 20;
$var-xyz;                 // prints “20”
$Var123 + $var-xyz;       // prints “30”
$var_xyz: 30;
$var_xyz;                 // prints “30”

// ── REBINDING WITH “:>” IMPLICITLY BINDS IF NEEDED ────────────────────────
55 :> $newImplicit;
$newImplicit;               // prints “55”
$newImplicit <: "oops";     // error: cannot assign Text to Number
$dougie <: "cool dude";     // should not error.
$dougie;                    // prints "cool dude".

// ── MULTIPLE ASSIGNMENTS ON ONE LINE ───────────────────────────────────────
$u: 1; $v: 2; $u + $v;    // prints “3”
$apples:1;$bananas:2; $apples+$bananas;       // prints 3
$apricot :  1 ; $boranges: 2;        // spacing should not break anything
$boranges;

// Var naming
$123abc: 5;      // prints 5
$_: 9;           // prints 9
$-foo: 3;        // prints 3
$123abc;         // prints 5
$_;              // prints 9
$-foo;           // prints 3
$meaning-of-life: 42;;  // error: extra semi-colon
