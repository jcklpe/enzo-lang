//= INVOKING AN UNDEFINED VARIABLE
error: undefined variable
	$undefinedVar;// error: undefined variable
//= EMPTY BIND ────────────────────────────────────────────────────────────
//= REDECLARING A VARIABLE (USING “:”) ERRORS ────────────────────────────
error: $x already defined
	$x: 10;             // error $x has already been declared
//= REBINDING WITH “<:” AND INVOKING ───────────────────────────────────────
100
error: cannot bind Text to Number
	$x <: "hello";      // error: cannot bind Text to Number
//= FULL BIND UPFRONT LOCKING TYPE ──────────────────────────────────────────
7
8
error: cannot bind Text to Number
	$z <: "oops";       // error: cannot bind Text to Number
error: $z already defined
	$z : "oops";       // error: $z already defined
//= MIXED‐CASE VARIABLE NAMES ───────────────────────────────────────────
10
20
30
30
//= REBINDING WITH “:>” IMPLICITLY BINDS IF NEEDED ────────────────────────
55
error: cannot bind Text to Number
	$newImplicit <: "oops";     // error: cannot bind Text to Number
"cool dude"
//= MULTIPLE ASSIGNMENTS ON ONE LINE ────────────────────────────────────
3
3
2
//= Var naming
5
9
3

//= LIST STUFF & INDEX ERRORS ─────────────────────────────────────────────
[]
error: List index out of range
	$emptyListTest.1;  // error: List index out of range
//= BIND EMPTY AND THEN FILL WITH LIST ────────────────────────────────────
error: $empty-list already defined
	$empty-list: 50;    //error: $empty-list already defined
["now not empty"]
//= DECLARE LIST AND ACCESS ITEMS ────────────────────────────────────────
"blue"
"green"
//= NESTED LISTS WITH INDEXING ────────────────────────────────────────────
3
//= MIXED LIST‐INSIDE‐LIST ● INDEX VS ATTR ──────────────────────────────
"b"
//= LIST OF LISTS + INDEX OF LIST ────────────────────────────────────
[[$x: 5], [$x: 7]]
7
//= Out-of-bounds and weird List indices
[1, 2, 3]
error: List index out of range
	$list.0;            // error: List index out of range
error: List index out of range
	$list.4;            // error: List index out of range
error: List index out of range
	$list.-1;           // error: List index out of range
error: can't use text as index
	$list."foo";        // error: can't use text as index or keyname
error: List index out of range
	$list.1.1;          // error: List index out of range
//= List mutation
[1, 2]
[5, 2]
error: List index out of range
	$mutable.3 <: 9;        // error: List index out of range
//= Trailing commas
[1, 2, 3]
error: double comma in List
	$badList1-index: [1,,2];                        // error: remove one comma
error: excess leading comma
	$badList2-index: [,1,2];                        // error: leading comma
error: empty List with just a comma
	$badList3-index: [,];                           // error: just comma
//= Various type errors
"oops"
error: index applies to Lists
	$notalist.1;                              // index applies to Lists

//= BINDING MATH OPERATIONS ────────────────────────────────────────────────
100
5
105
//= ARITHMETIC PRECEDENCE CHECK ─────────────────────────────────────────────
14
20
//= PARENTHESIZED EXPRESSIONS AS STAND‐ALONE ─────────────────────────────
15
//= LARGE NUMBERS + NEGATIVE NUMBERS ────────────────────────────────────
1234567890
-5
-10
0
error: double minus not allowed
	$weird: --5;              // error: double minus not allowed

//= Modulo Basics
1
2
0
0
0

//= MODULO WITH NEGATIVES
1
2
1

//= MODULO WITH ZERO DIVIDEND
0

//= MODULO BY 1
0
0

//= MODULO BY -1
0
0

//= MODULO WITH LARGE NEGATIVE DIVIDEND
3

//= MODULO WITH DIVISOR ZERO (ERROR)
error: No division by zero
	5 % 0;           // should error: division by zero
error: No division by zero
	-5 % 0;          // should error: division by zero

//= LIST MAPPING STUFF ───────────────────────────────────────────────────────────
[$name: "Alice", $age: 30]
"Alice"
30
//= REBINDING LIST PROPERTIES ────────────────────────────────────────────
"Bob"
[$name: "Bob", $age: 30]
//= ANOTHER LIST + PROPERTY REBIND ───────────────────────────────────────
[$foo: 42, $bar: "hello"]
"hello"
100
[$foo: 100, $bar: "hello"]
//= EMPTY LIST LITERAL + BAD PROP ACCESS ERROR ──────────────────────────
[]
error: List property not found: $someKey
	$emptyListMap.someKey;    // error: Keyname '$someKey' does not exist on this List
//= NESTED LIST + MIXED INDEX/PROPERTY ───────────────────────────────────────
[$inner: [$val: 42, $arr: [10, 20]]]
42
20
//= REBINDING NESTED LISTS ───────────────────────────────────────────────
100
//= COMPLEX LIST INDEX/PROPERTY ACCESS ─────────────────────────
[$list-map: [$a: [100, 200], $b: "x"], $list-index: [[$foo: 1], [$foo: 2]]]
100
2
//= LIST OF LISTS + INDEX OF LIST ─────────────────────────────────────
[$first: [1, 2], $second: [3, 4]]
2
[3, 4]
//= MORE LIST WEIRDNESS
[$x: [$y: [$z: 7]]]
7
//= List property errors
[$foo: 1]
error: List property not found: $bar
	$list9.bar;         // error: List property '$bar' not found
1
error: List property not found: $bar
	$list9.foo.bar;     // error: List property '$bar' not found
999
error: List property not found: $someKey
	$prim.someKey <: 5;       // error: List property '$someKey' not found
[$a: 1]
1
[$x: 1]
99
[$x: 99]
error: List property not found: $y
	$table-error.y <: 42;           // error: List property '$y' not found
//= Valid trailing commas (should succeed)
[$foo: 1, $bar: 2]
//= invalid trailing commas (should error)
error: extra comma in List
	$badList1: [$foo: 1,, $bar: 2];
error: excess leading comma
	$badList2: [ ,$foo: 1, $bar: 2];
error: empty List with just a comma
	$badList3: [ ,];

//= TEXT + INTERPOLATION ───────────────────────────────────────────────────
"rebinding this text and "
"this is text example 2"
"just a plain text"
"rebinding this text and this is text example 2"
100
5
"100 plus 5 is: 105"
//= NOW THAT $colors & $i ARE DEFINED, INTERPOLATE A STRING THAT USES THEM ─
2
["red", "purple", "green", "silver"]
"color 2 is purple"
//= COMPLEX MATH INTERPOLATION ● MULTIPLE EXPRESSIONS ───────────────────
7
3
"Sum=10 Prod=21"
//= COMPOUND INTERPOLATION WITH LIST ACCESS ────────────────────────
[$greeting: "hi", $nums: [2, 4]]
"hi! The nums are:2, and 4"
//= Unicode and weird strings
"π≈3.14"
"foo\nbar"
"foo\"bar\"baz"
//= Interpolation errors
error: parse error in interpolation
	"text <bad syntax>";    // error: undefined variable or parse error in interp
error: parse error in interpolation
	"hello <$foo + >";      // error: parse error in interpolation
error: parse error in interpolation
	"hello <<$foo>>";       // error: nested <...> not allowed (for now)

//= Empty function atom
//= Function atom with just a single value
6
//= Function atom with single variable and implicit return
99
//= Nested function atoms
6
9
//= Function atom one liner with implicit return
5
6
//= Function with only a return statement (multi-line)
123
//= Multiline function atom with explicit return
200
//= Multiline function atom with explicit return 2
201
//= Multiline nested function atoms
32
//= Single line, implicit return, named function
"this is the normal function invocation;"
4
"this is the $times2 style function invocation;"
4
"this is the $times2(); style function invocation"
4
//= Nameless function: multi-line with no explicit return
3

//= Multi-line with params and default values
12
12
12

//= passing functions as references
12
9
error: too many args
	adder(4, 5, 6);                // error: too many args
error: expected argument is a Number atom, not a Text atom
	$adder("", 500);               // error: expected argument is a Number atom, not a Text atom
305
//= Named function with local variable
11
5

//= Subtraction with empty default
1
-1
error: missing necessary params
	subtractor();        // error: missing necessary params
error: missing necessary params
	$subtractor(4);   //error: missing necessary params

//= List of functions invoked by index
11
20

//= Named function, then function reference and direct invocation
10
6
error: expected function reference (@) or function invocation ($)
	double;              // error: expected function reference (@) or function invocation ($)

//= Higher-order function: passing function as argument and using default argument
8
14
error: expected function reference (@) or function invocation ($)
	apply(double, 4);    // error: expected function reference (@) or function invocation ($)

//= List with function member and self mutation
10
11
12
12
<function () multiline=True>
//= List of functions: referencing as variables
11
6
//= Nested function: inner function shadows param
17
27
//= Duplicate param name error in function declaration
error: duplicate parameter name '$x' in function definition
	param $x: 2;

//= Empty function declaration and invocation
//= Function with default param referencing previous param
10
4
12
//= List with a list of functions as a property
8
//= List function and interpolation with self behavior
"Hi, my name is ralph."
"I'm now spinning right."

//= Functions as members of lists
10
21

//= Function with numeric param name
4

//= Early exit
99

//= Function param name shadows outer variable
1

//= function atoms and pipes
6
11
12
16
20
15
20
30
10
100
5
50
20
10
12

//= Multiline function atom
10
15
20
30
40

//= PIPELINE ERROR: SHADOWING $this IS DISALLOWED
error: cannot declare variable '$this'
	$this: 7;
//= PIPELINE NEGATIVE NUMBER HANDLING
-10
-15

//= PIPELINE WITH TEXT INTERPOLATION
"Hello, World!"

//= PIPELINE WITH INTERPOLATION AND MATH
"double of 5 is 10"

//= PIPELINE WITH LIST MANIPULATION
2

//= PIPELINE NESTED LIST ACCESS
30

//= PIPELINE LIST PROPERTY
15
15

//= PIPELINE ERROR NO FUNCTION ATOM
error: pipeline expects function atom after `then`
	5 then 10; // error: pipeline expects function atom after `then`

//= PIPELINE ERROR EMPTY FUNCTION ATOM
//= Complex tests
24
25
25

//= Multi-line and params in named functions
12
15

//= NAMED FUNCTION: referencing $this is an error
error: can't use reserved $this keyname in named function declaration
	breaking2: (

//= COPY BY DEFAULT: LISTS ───────────────────────────────────────────────────────────
[1, 2, 3]
[99, 2, 3]
[1, 2, 3]

//= COPY BY DEFAULT: NESTED LISTS ───────────────────────────────────────────────────
[$inner: [99, 20]]
[$inner: [10, 20]]

//= VARIABLE REFERENCE WITH @ ───────────────────────────────────────────────────────
[4, 99, 6]
[4, 99, 6]

//= REFERENCE TO VARIABLE (COPY VS EXPLICIT REFERENCE) ──────────────────────────────
100
200
300
300

//= FUNCTION ARGUMENT REFERENCE VS COPY ──────────────────────────────────────────────
[99, 2, 3]
[1, 2, 3]
[99, 2, 3]
[99, 2, 3]

//= REFERENCE VS COPY IN LIST OF LISTS ──────────────────────────────────────────────
[$first: [99, 2], $second: [3, 4]]
[$first: [1, 2], $second: [3, 4]]
[$first: [1, 2], $second: [3, 88]]
[$first: [1, 2], $second: [3, 88]]

//= REFERENCE VS COPY IN FUNCTIONS ──────────────────────────────────────────────────
11
10
11
11

//= COPY-BY-DEFAULT WITH FUNCTIONS ────────────────────────────────────────────
[$bar: 1]
[$bar: 99]
1

//= REFERENCE PASSING WITH @ ───────────────────────────────────────────────────
[$bar: 1]
[$bar: 42]
42

//= REFERENCE CAPTURE WITHIN A FUNCTION ────────────────────────────────────────
10
11
12
12

//= COPY-BY-DEFAULT INSIDE A METHOD ─────────────────────────────────────────────
20
21
20

//= USING $this IN A PIPELINE ───────────────────────────────────────────────────
[$health: 100, take-damage: <function ($amount) multiline=True>]
[$health: 85, take-damage: <function ($amount) multiline=True>]
85

//= USING EXTERNAL FUNCTION + PIPELINE + @this ────────────────────────────────
[$health: 100]
100

//= COPY-BY-DEFAULT FAILS TO MUTATE ─────────────────────────────────────────────
[$health: 125]
150

//= SIMPLE BLUEPRINT INSTANTIATION ───────────────────────────────────────────
SimpleGoblin[$health-points: 100, $position: [10, 10]]
SimpleGoblin[$health-points: 100, $position: [10, 15]]

//= BLUEPRINT WITH DEFAULTS ────────────────────────────────────────────────
GoblinDefaults[$health-points: 100, $position: [0, 0]]
GoblinDefaults[$health-points: 105, $position: [11, 15]]
GoblinDefaults[$health-points: 100, $position: [10, 10]]

//= BLUEPRINT WITH COMPLEX FIELDS AND FUNCTION ─────────────────────────────
Goblin[$health-points: 100, $position: [10, 10], $attacks: [$bite: 50, $torch: 40], $status-effect: "poisoned"]
Goblin[$health-points: 110, $position: [15, 10], $attacks: [$bite: 55, $torch: 35], $status-effect: "none"]
90
110

//= BLUEPRINT COMPOSITION ──────────────────────────────────────────────────
[10, 5, 0]
Duck[$position: [10, 5, 5], $wings: "true", $fly: <function ($z-position-movement) multiline=True>, $lives-near-water: "Text", $swim: <function ($x-position-movement, $y-position-movement) multiline=True>]
5
"true"


//= BLUEPRINT COMPOSITION: CONFLICT ERROR ──────────────────────────────
error: duplicate property 'x' in composed blueprints
	C: A and B;     // error: duplicate property 'x' in composed blueprints

//= SIMPLE VARIANT GROUP (OPTIONS ONLY) ────────────────────────────────
Magic-Type.Fire
error: 'Plasma' not a valid Magic-Type
	$wizard-attacks.bad-spell: Magic-Type.Plasma; // error: 'Plasma' not a valid Magic-Type

//= VARIANTS WITH BLUEPRINTS (SUM-OF-PRODUCTS) ─────────────────────────
"heeheehee"
"Manmeat for dinner!"

//= VARIANT GROUPING WITH INLINE BLUEPRINTS ────────────────────────────
"RARGH!!!"


//= VARIANTS WITH SHARED BLUEPRINT FIELDS ──────────────────────────────
"heeheehee"
7

//= USING VARIANTS AS FIELD VALUES IN ANOTHER BLUEPRINT ────────────────
Magic-Type.Ice
Magic-Type.Neutral

//= SIMPLE NAMED DESTRUCTURING ─────────────────────────────
"Todd"
27
"blue"

//= NAMED DESTRUCTURING WITH RENAMING ────────────────────
"Todd"
27
"blue"

//= ALTERNATE DIRECTION DESTRUCTURING ────────────────────
"Todd"
27
"blue"

//= POSITIONAL DESTRUCTURING ─────────────────────────────
1
2
3

//= HYBRID NAMED+POSITIONAL DESTRUCTURING ────────────────
5
6
7

//= HYBRID NAMED+POSITIONAL WITH DIFFERENT ORDER ─────────
5
6
7

//= COPY BY VALUE: CHANGING DESTRUCTURED VARIABLE DOES NOT MUTATE ORIGINAL ──────
"Ali"
21
"Mo"
22

//= RESTRUCTURING: WRITING BACK TO ORIGINAL ──────────────
"Bea"
40
"Beatrix"
41

//= PARTIAL RESTRUCTURING ────────────────────────────────
"Calvin"
19
"yellow"

//= RESTRUCTURING WITH RENAMING ─────────────────────────
5
"green"
"green"

//= DESTRUCTURING BY REFERENCE: MUTATION PROPAGATES ─────
"Dan"
51

//= DESTRUCTURING WITH RENAMING BY REFERENCE ─────────────
"Denise"

//= EDGE CASE: AMBIGUOUS DESTRUCTURE (SHOULD ERROR) ─────
error: duplicate variable names in destructure
	$foo9, $foo9, $bar9: $hybrid9[]; // error: duplicate variable names in destructure

//= EDGE CASE: TOO MANY OR TOO FEW VARIABLES (SHOULD ERROR) ─────────────
error: destructure count mismatch
	$a10, $b10, $c10, $d10: $example-list10[]; // error: destructure count mismatch
1
2

//= DESTRUCTURING OF EMPTY LIST ────────────────────────
error: destructure count mismatch
	$a11, $b11: $empty11[]; // error: destructure count mismatch

//= NESTED DESTRUCTURING ──────────────────────────────
5
9
2

//= RESTRUCTURING NESTED LIST ─────────────────────────
7

//= SIMPLE IF TEST
"Ready!"

//= IF CONDITION NOT MET and not
"this should print"

//= ELSE TEST
"Fallback triggered"

//= NOT CONDITION FALSE
"this should print"

//= IS VALUE MATCH TRUE and False
"Matched blue"

//= IS TYPE MATCH TRUE
"It's a number"

//= IS TYPE MATCH FALSE
//= IS EMPTY MATCH
"Empty detected"

//= LESS THAN TRUE and FALSE
"Less than 10"

//= GREATER THAN TRUE and FALSE
"Greater than 10"

//= AT MOST (<=) TRUE and FALSE
"At most 10"

//= AT LEAST (>=) TRUE and FALSE
"At least 10"

//= CONTAINS TRUE and FALSE
"Contains 2"

//= AND
"Both conditions true"

//= OR
"At least one true"

//= ELSE IF FIRST MATCH
"First match"

//= ELSE IF SECOND MATCH
"Second match"

//= ELSE IF FALLBACK MATCH
"Fallback matched"

//= MULTI-BRANCH SWITCH
"B matched"

//= MULTI-BRANCH WITH DEFAULT (Otherwise FALLBACK)
"Fallback fruit"

//= MULTI-BRANCH TYPE GUARD MATCHING
"Big number"

//= MULTI-BRANCH TYPE MATCH WITH VARIANT
"Ice type matched"

//= MULTI-BRANCH CONTAINS MATCH
"Key found"

//= MULTI-BRANCH COMPOUND LOGIC
"Small number matched"

//= MULTI-BRANCH LIST EXACT MATCH
"Exact List matched"

//= MULTI-BRANCH WITH VARIANT GROUP
"Goblin matched"

//= INLINE IF TRUE and FALSE
"Go!"
"Wait!"



//= BOOLEAN EDGE CASE FALSE CONDITIONS
"will print"
"will print"
"will print"
"will print"
"will print"
"will print"

//= BOOLEAN EDGE CASE TRUE CONDITIONS
"True variant group"
"True variant value"
"True text atom"

//= Function Atom as condition
"Will print"
"Will print"

//= IF WITH FUNCTION RETURNING EMPTY (FALSY)
"Empty function result"

//= IF WITH FUNCTION RETURNING NON-EMPTY (TRUTHY)
"Non-empty function result"

//= IF WITH VARIABLE SET TO EMPTY LIST THEN MUTATED TO TRUTHY LIST
"List became truthy"

//= IF WITH VARIABLE SET TO TEXT "0" (TRUTHY)
"Text '0' is truthy"

//= IF WITH VARIABLE SET TO NUMBER 0.0 (FALSY)
"0.0 is falsy"

//= IF WITH EMPTY BLUEPRINT INSTANCE (TRUTHY)
"Empty blueprint is falsy!"

//= IF WITH VARIABLE SET TO STATUS.FALSE THEN MUTATED TO CUSTOM STATUS (TRUTHY)
"Custom status is truthy"

//= MULTI-BRANCH MATCH WITH SECOND TRUTHY MATCH
"Second matched"

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ONLY FIRST EXECUTES
"At least 5 matched"

//= MULTI-BRANCH MATCH WITH MULTIPLE TRUTHY CONDITIONS, ALL EXECUTE
"At least 5 matched"
"generic number should print"

//= ERROR CASE: USING UNDEFINED VARIABLE IN IF
error: undefined variable
	If $undefined-var, ( // error: undefined variable

//= ERROR CASE: INVALID COMPARISON TYPE
error: can't compare List with Number
	If $list-contain is less than 10, (

//= ERROR CASE: INVALID USE OF "CONTAINS" ON NON-LIST
error: contains used on non-List
	If $non-list-val contains 1, (

//= ERROR CASE: INVALID MULTI-BRANCH "or" WITHOUT PRECEDING IF
error: `or` without preceding `If`
	or "value", ( // error: `or` without preceding `If`

//= ERROR CASE: ELSE IF WITHOUT INITIAL IF
error: `Else if` without preceding `If`
	Else if $color is "blue", ( // error: `Else if` without preceding `If`

//= ERROR CASE: ELSE WITHOUT INITIAL IF
error: `Else` without preceding `If`
	Else, ( // error: `Else` without preceding `If`

//= BOOLEAN TEST: LIST WITH ALL FALSY ELEMENTS
"All falsy elements in a List are falsy"

//= BOOLEAN TEST: TEXT WITH WHITESPACE ONLY (TRUTHY)
"Whitespace text is truthy"

//= BOOLEAN TEST: VARIABLE WITH EMPTY BLUEPRINT VARIANT (TRUTHY)
"Empty variant is truthy"

//= BOOLEAN TEST: EMPTY PARAMETERIZED FUNCTION (FALSY)
"Empty parameterized function is falsy"

//= INLINE IF WITH VARIABLE SET TO NUMBER 1 (TRUTHY)
"Number 1 is truthy"

//= INLINE IF WITH EMPTY LIST (FALSY)
"Empty List falsy"

//= DESTRUCTURE IN IF CONDITION (Truthy)
"Eve is over 21"

//= DESTRUCTURING BY REFERENCE AND MUTATION IN CONTROL FLOW
100

//= MULTI-STAGE PIPELINE WITH CONDITIONAL STEP ERROR
error: comparison word in pipeline
	$list-pipe
	then ($this contains 4) :> $contains-four;

//= Has function and pipeline
"List contains four"

//= IF CONDITION WITH LIST INDEX ACCESS
"Second index matched 'one'"
"Third index is not 'one'"

//= LIST MAPPING WITH CONTROL FLOW CONDITION
"alice is active"

//= LIST MAPPING AND PIPELINE INTO CONTROL FLOW
"User active status: yes"

//= BLUEPRINT DEFAULTS IN CONTROL FLOW
"Hero at full health"

//= ERROR: IF CONDITION ACCESSING INVALID LIST INDEX
error: List index out of range
	If $bad-list50.4, ( // error: List index out of range

//= ERROR: IF CONDITION ON UNDEFINED PROPERTY IN LIST
error: List property not found: $age
	If $user-bad.age, ( // error: List property `$age` not found

//= More destructuring stuff and conditionals stuff
"Pass: positional destructure"

//= multiple statements in an inline if
"passing one statement from inline If"
"passing a second one"
5
6

//= IF WITH NESTED CONDITIONALS
"Nested condition true"

//= PIPELINE WITH INLINE FUNCTION RETURNING EMPTY (FALSY)
"Pipeline resulted in empty"

//= BOOLEAN TEST: NESTED LIST WITH TRUTHY AND FALSY ELEMENTS
"Nested List considered truthy"

//= ERROR: USING "is" WITH A VARIANT THAT DOES NOT EXIST
error: undefined variable
	If $status-bp is StatusVariantBP.Unknown, (// error: undefined variable
//= Conditional pipelining
0
"dead"

//= IF CONDITION WITH NESTED LIST INDEX ACCESS
"Nested index matched 'two'"

//= COMPUTED INDEX: BASIC ADDITION
30

//= COMPUTED INDEX: WITH LITERAL ARITHMETIC
300
200

//= COMPUTED INDEX: WITH NESTED EXPRESSIONS
300
300

//= COMPUTED INDEX: NEGATIVE AND ZERO
error: List index out of range
	$list300.($a00 - 1);          // error: List index out of range (if $a = 1)
5
10
error: List index out of range
	$list300.(-1);              // error: List index out of range

//= COMPUTED INDEX: OUT OF BOUNDS
error: List index out of range
	$list300.(4);               // error: List index out of range (List has 3 elements)
error: List index out of range
	$list300.($a00 + $b00 + 2);     // error: List index out of range

//= COMPUTED INDEX: NON-INTEGER RESULT
error: List index must be an integer
	$list400.(1.5);             // error: List index must be integer
error: List index must be an integer
	$list400.($a00 / 2);          // error: List index must be integer

//= COMPUTED INDEX: INVALID EXPRESSION TYPE
error: can't use text as index
	$list400.("hi");            // error: List index must be integer
error: List index must be an integer
	$list400.($list100);          // error: List index must be integer

//= COMPUTED INDEX: USE IN ASSIGNMENT
99

//= COMPUTED INDEX: USE IN PIPELINE
30

//= COMPUTED INDEX: INDEX BY FUNCTION RETURN (optional, if supported)
99

//= COMPUTED INDEX: VARIABLE SHADOWING
30

//= COMPUTED INDEX: IN INTERPOLATION
"Element is 99"

//= Basic loop: 1 time
"There have been 1 loop iterations"

//= Basic loop: 3 times
"There have been 1 loop iterations"
"There have been 2 loop iterations"
"There have been 3 loop iterations"

//= LOOP WITH SKIP ON CONDITION
1
3
5
7
9

//= SIMPLE LOOP: INCREMENT INSIDE, BREAKS AFTER 5
1
2
3
4
5

//= Loop function atom shadowing
0
10
0
11
11

//= Multi iteration loops with fresh shadow scope
5
1
2
1
1
2
2
1
2
3
5

//= Not a loop error
"this function atom is not a loop"
error: `end-loop;` inside a non-loop function atom
	end-loop; // error: `end-loop;` inside a non-loop function atom
"this function atom is not a loop"
error: `restart-loop;` inside a non-loop function atom
	restart-loop; // error: `restart-loop;` inside a non-loop function atom


//= ERROR: UNDECLARED VARIABLE USED INSIDE LOOP
error: undefined variable
	$undefVar-loop;      // error: undefined variable


//= LOOP: PIPELINING IN LOOP BODY
16

//= WHILE LOOP SIMPLE
1
2
3

//= WHILE LOOP NEVER ENTERED (INITIAL CONDITION FALSE)
5

//= SIMPLE FOR LOOP
"Item: 1"
"Item: 2"
"Item: 3"

//= FOR LOOP WITH EMPTY LIST (NEVER ENTERED)
[]

//= ERROR: FOR LOOP WITH NON-ITERABLE
error: `For` loop must be over a List
	Loop for $item10 in 10, ( // error: `for` loop must be over a List

//= WHILE LOOP WITH COMPLEX CONDITION
"Counter: 1"
"Counter: 2"
"Counter: 3"
"Counter: 4"
"Counter: 5"
False

//= UNTIL LOOP: THE OPPOSITE OF WHILE
"Count is 0"
"Count is 1"
"Count is 2"
3

//= UNTIL LOOP THAT NEVER RUNS
10

//= FOR LOOP: ITEM IS A COPY, NOT A REFERENCE
"Item copy is now 11"
"Item copy is now 21"
"Item copy is now 31"
[10, 20, 30]

//= FOR LOOP: ITEM IS A REFERENCE
"Item is now 11"
"Item is now 21"
"Item is now 31"
[11, 21, 31]

//= WHILE LOOP MUTATING THE ORIGINAL LIST (BY INDEX)
[15, 25, 35]

//= WHILE LOOP SHADOWING
0
1
2
1
1
2
2
1
2
3
3

//= While loop shadowing exception
0
0
1
2
1
1
2
2
1
2
3
3
0


//= FOR LOOP OVER LIST OF LISTS
"Inner List: [1, 2]"
1
"Inner List: ["a", "b"]"
"a"

//= FOR LOOP WITH DESTRUCTURING INSIDE
"User Alice is 30 years old."
"User Bob is 42 years old."

//= USING RESTART-LOOP AND END-LOOP
"Found 8, ending loop."
12

//= MODIFYING THE LIST WHILE ITERATING (APPENDING)
"Item: 1"
"Item: 2"
"Item: 3"
[1, 2, 3]

//= MODIFYING AN UPCOMING ITEM
"Current item: a"
"Current item: b_mod"
"Current item: c"
["a", "b_mod", "c"]

//= ITERATING OVER BLUEPRINT INSTANCES
"Bork needs healing!"

//= END-LOOP AFFECTS INNERMOST LOOP ONLY
"Outer loop started"
"Inner loop running"
"ending inner loop"
"Inner loop finished"

//= RESTART-LOOP AFFECTS INNERMOST LOOP ONLY
"Processing row: [1, 2]"
"Cell: 1"
"Cell: 2"
"Processing row: [3, 4]"
"Found 3, restarting inner loop"
"Cell: 4"

//= LOOP INSIDE A FUNCTION WITH A RETURN
8
False

//= FOR LOOP (LIVE): DELETING AN ITEM BEHIND THE ITERATOR
["a", "b", "c"]
["b", "c"]

//= FOR LOOP (LIVE): DELETING THE CURRENT ITEM AND SKIPPING THE NEXT
["a", "b", "d"]
["a", "c", "d"]

//= FOR LOOP (LIVE): CLEARING THE LIST MID-ITERATION
[10, 20]
[]

//= FOR @ITEM: MUTATING PROPERTIES OF BLUEPRINT INSTANCES
30
60

//= FOR @ITEM: REBINDING AN ENTIRE ELEMENT TO A NEW INSTANCE
[Player[$name: "Goblin", $hp: 30], Player[$name: "Super Orc", $hp: 100]]

//= FOR @ITEM: ERROR ON TYPE-INCONSISTENT REBINDING
error: cannot bind Text to Number
	"should not work" :> $num_ref; // error: cannot bind Text to Number

//= NESTED LOOPS: SHADOWING THE LOOP VARIABLE
"Outer: 1"
"Inner: a"
"Inner: b"
"Outer again: 1"
"Outer: 2"
"Inner: a"
"Inner: b"
"Outer again: 2"

//= FOR LOOP OVER A LIST CONTAINING EMPTY/FALSY VALUES
""
False

//= ERROR: USING `end-loop` IN A PIPELINE
error: `end-loop;` inside a non-loop function atom
	1 then (end-loop;); // error: `end-loop;` inside a non-loop function atom

//= LOOPING OVER A REFERENCE TO A LIST
["x", "y", "z"]

//= WHILE LOOP WITH END-LOOP
0
1
2
3
3

//= WHILE LOOP WITH RESTART-LOOP
1
2
3
4
5
4

//= UNTIL LOOP WITH END-LOOP
2
4
8
16
16

//= UNTIL LOOP WITH RESTART-LOOP
1
2
3
4
3

//= FOR LOOP WITH END-LOOP
1
2
3

//= FOR LOOP WITH RESTART-LOOP
"Processing: 1"
"Processing: 2"
"Processing: 4"
"Processing: 5"

//= FOR LOOP WITH REFERENCE AND END-LOOP
10
20
30
[10, 20, 30, 40]

//= WHILE LOOP WITH BOTH END-LOOP AND RESTART-LOOP
[1, 2, 4, 5, 6]

//= FOR LOOP ERROR: END-LOOP IN NESTED FUNCTION
error: `end-loop;` inside a non-loop function atom
	(end-loop;); // error: `end-loop;` inside a non-loop function atom

//= LIST INTERPOLATION: BASICS
[1, 2, 3, 4, 5]

//= LIST INTERPOLATION: PREPEND
[0, 10, 11, 12]

//= LIST INTERPOLATION: APPEND
["a", "b", "c"]

//= LIST INTERPOLATION: NESTED INTERPOLATION
[1, 2, [3, 4]]

//= LIST INTERPOLATION: INSERTION
[0, 100, 200, 300]

//= LIST INTERPOLATION: MULTIPLE INTERPOLATIONS IN ONE LIST
[1, 2, 3, 4, 5]

//= LIST INTERPOLATION: EMPTY LISTS
[]

//= LIST INTERPOLATION: EMPTY IN NON-EMPTY LIST
[99]

//= LIST INTERPOLATION: SINGLE NON-LIST VALUE (should just insert value)
[42, 99]

//= LIST INTERPOLATION: INTERPOLATION OF NON-LIST VALUE (should error)
error: cannot interpolate non-List into a List
	$li19: [<$notalist-interp>];         // should error: cannot interpolate non-list into a list

//= LIST INTERPOLATION: NESTED LISTS (non-interpolated, for comparison)
[[1, 2], [3, 4]]

//= LIST INTERPOLATION: TRAILING/LEADING INTERPOLATION
[5, 6]
[5, 6]

//= LIST INTERPOLATION: APPEND TO EMPTY LIST
[5, 6]

//= LIST INTERPOLATION: WITH TEXTS AND MIXED TYPES
[1, "apple", "banana", "pear"]

//= LIST INTERPOLATION: MULTIPLE EMPTY LISTS
[]

//= LIST INTERPOLATION: ERROR IF INTERPOLATING UNDEFINED VARIABLE
error: undefined variable
	$li30: [<$does_not_exist>];   // should error: undefined variable

//= LIST INTERPOLATION: INTERPOLATING A BLUEPRINT INSTANCE (should insert as value)
error: cannot interpolate non-List into a List
	$li31: [<$bp1>];              // should error: cannot interpolate non-list into a list

//= PIPELINE INTERPOLATE
[[1, 2, 3], 99]
[1, 2, 3, 99]

//= SHADOWING: VARIABLE IN `If` BLOCK SHADOWS GLOBAL
"Inside If: if-shadow"
"Outside If: global"

//= REBINDING: MODIFYING GLOBAL VARIABLE FROM `If` BLOCK
"Inside If: shadowing it using rebind"
"Outside If: shadowing it using rebind"

//= SCOPE LEAKAGE: VARIABLE DECLARED IN `If` IS UNDEFINED OUTSIDE
error: undefined variable
	$z-local; // error: undefined variable

//= SCOPE ISOLATION: `If` AND `Else` BLOCKS HAVE SEPARATE SCOPES
"In Else: else-branch"
error: undefined variable
	$if-var; // error: undefined variable (was defined in a separate scope)
"Afterward: global"

//= SCOPE ISOLATION: `Else if` HAS ITS OWN ISOLATED SCOPE
"In Else If: Level 1"
error: undefined variable
	$msg-scope; // error: undefined variable (each $msg was local to its own conditional block)

//= NESTED SHADOWING: INNER SCOPE SHADOWS OUTER SCOPE
"Innermost scope: level 3"
"Middle scope: level 2"
"Outermost scope: level 1"

//= BASIC ASSIGNMENT: IF-TRUE PATH
"adult"

//= BASIC ASSIGNMENT: ELSE-FALSE PATH
"minor"

//= REBINDING AN EXISTING VARIABLE
"teenager"

//= TYPE CONSISTENCY ON REBINDING
100
error: cannot bind Text to Number
	$result-33 <: If False, (300), Else, ("error-type"); // error: cannot bind Text to Number

//= NESTED INLINE CONDITIONALS IN ASSIGNMENT
10

//= INLINE IF: BODY IS A SCOPE AND DOES NOT LEAK
"Result of inline If: inner"
"After inline If: outer"

//= ANON REF: ASSIGNMENT TO A VARIABLE
6
6
"Variable holds a function reference"
"Variable holds a function reference"

//= ANON REF: STORING IN A LIST
20
20
100
100

//= ANON REF: PASSING DIRECTLY AS A FUNCTION ARGUMENT
"Hello, Enzo!"

//= ANON REF: IN A LIST PROPERTY (METHOD)
15
15

//= ANON REF: NESTED ANONYMOUS REFERENCE
"[LOG] System Ready"
"[LOG] System Ready"

//= ERROR CASE: FORGETTING THE `@` SIGIL
error: expected argument is a Function atom, not a Number atom
	anon_ref_apply( (param $x:5; $x * 2), "text" ); // error: param expects Function type

//= ERROR CASE: SYNTAX ERROR INSIDE THE FUNCTION BODY
error: parse error in Function atom body
	$anon_ref_bad_syntax: @(param $x: $x + ); // error: parse error in Function atom body

//= CLOSURE: BASIC FUNCTION FACTORY
12
100

//= CLOSURE: STATEFUL COUNTER (ENCAPSULATION)
1
2
1
3

//= CLOSURE: INTERACTION WITH GLOBAL SCOPE SHADOWING
"captured"

//= CLOSURE: STORED IN A DATA STRUCTURE
15
4

//= IMMEDIATE INVOCATION: BINDING VALUE VS. FUNCTION
"imm_func is a Function"
4
"imm_value is a Number"
5

//= IMMEDIATE INVOCATION: REBINDING AND TYPE LOCKING
25
6
error: cannot bind Text to Number
	$imm_result <: !("hello"); // error: cannot bind Text to Number

//= IMMEDIATE INVOCATION: IN A LIST LITERAL
10
20
30

//= IMMEDIATE INVOCATION: AS A FUNCTION ARGUMENT
25

//= IMMEDIATE INVOCATION: WITH MULTI-STATEMENT BODY
50
error: undefined variable
	$imm_a; // error: undefined variable

//= IMMEDIATE INVOCATION: REDUNDANT BUT VALID USE
9
"Value is: 8"

//= ERROR CASE: `!` NOT FOLLOWED BY A FUNCTION ATOM
error: The `!` sigil for immediate invocation must be followed by a Function atom `(...)`.
	$imm_bad: !5; // error: The `!` sigil for immediate invocation must be followed by a function atom `(...)`.

//= ERROR CASE: SYNTAX ERROR INSIDE THE FUNCTION ATOM
error: parse error in Function atom body
	$imm_bad2: !($x + ); // error: parse error in function atom body

//= RECURSION: CLASSIC FACTORIAL
120
1

//= RECURSION: MUTUAL RECURSION FOR EVEN/ODD
True
True
False

//= RECURSION: SCOPE INTEGRITY WITH SHADOWING
3
2
1
0
"Global n is still: 100"

//= RECURSION: WITH A NAMED ANONYMOUS REFERENCE
24

//= RECURSION: STACK OVERFLOW PROTECTION
error: Maximum recursion depth exceeded
	rec_infinite(); // error: Maximum recursion depth exceeded

//= METHOD REFERENCING: BASICS
"Woof! My name is Spot"
"Woof! My name is Spot"

//= METHOD REFERENCE PASSED AS ARGUMENT
"Woof! My name is Spot"

//= METHOD REFERENCE WITH STATE MUTATION
7

//= METHOD REFERENCE TO ANONYMOUS FUNCTION INSIDE LIST
15

//= METHOD REFERENCE: NESTED LIST
"hi from inner"

//= METHOD REFERENCE ERROR: NON-EXISTENT METHOD
error: List property not found: $nonexistent
	$bad-ref: @pet.nonexistent;   // error: List property not found: $nonexistent

//= BLUEPRINT METHOD REFERENCING: BASICS
"I am Fido"

//= BLUEPRINT METHOD WITH STATE MUTATION ──────────────────────
1
2
2

//= METHOD REFERENCE PASSED INTO FUNCTION (BLUEPRINT) ─────────
3

//= VARIANT METHOD REFERENCING ────────────────────────────────
"heeheehee"
"Manmeat for dinner!"

//= VARIANT METHOD PASSED INTO FUNCTION ───────────────────────
"heeheehee"
"heeheehee"

//= ERROR: METHOD REFERENCE TO NON-EXISTENT VARIANT METHOD ────
error: List property not found: $nonexistent
	$bad-ref-v: @g3.nonexistent;  // error: List property not found: $nonexistent

//= BLOCK COMMENT: BASIC FUNCTIONALITY
1

//= BLOCK COMMENT: MULTILINE USAGE
2

//= BLOCK COMMENT: COMMENTING OUT CODE
3

//= BLOCK COMMENT: INLINE BETWEEN CODE
4

//= BLOCK COMMENT: EMPTY COMMENT
5

//= BLOCK COMMENT: SPECIAL CHARACTERS AND SYNTAX
6

//= BLOCK COMMENT: NO NESTING
"and this text is not in a comment.'/"

//= BLOCK COMMENT: ERROR ON UNTERMINATED COMMENT
error: unclosed block comment
	/' This is an open comment that never closes. // error: unclosed block comment

//= consecutive Function atoms
8
11
