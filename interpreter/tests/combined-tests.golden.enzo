//= INVOKING AN UNDEFINED VARIABLE
unknown variable: $undefinedVar
    $undefinedVar;
//= EMPTY BIND ────────────────────────────────────────────────────────────
//= REDECLARING A VARIABLE (USING “:”) ERRORS ────────────────────────────
error: $x already defined
    $x: 10;
//= REBINDING WITH “<:” AND INVOKING ───────────────────────────────────────
100
error: cannot bind Text to Number
    $x <: "hello";
//= FULL BIND UPFRONT LOCKING TYPE ──────────────────────────────────────────
7
8
error: cannot bind Text to Number
    $z <: "oops";
error: $z already defined
    $z : "oops";
//= MIXED‐CASE VARIABLE NAMES ───────────────────────────────────────────
10
20
30
30
//= REBINDING WITH “:>” IMPLICITLY BINDS IF NEEDED ────────────────────────
55
error: cannot bind Text to Number
    $newImplicit <: "oops";
"cool dude"
//= MULTIPLE ASSIGNMENTS ON ONE LINE ────────────────────────────────────
3
3
2
//= Var naming
5
9
3

//= LIST STUFF & INDEX ERRORS ─────────────────────────────────────────────
[  ]
error: list index out of range
    $emptyListTest.1;
//= BIND EMPTY AND THEN FILL WITH LIST ────────────────────────────────────
error: $empty-list already defined
    $empty-list: 50;
[ "now not empty" ]
//= DECLARE LIST AND ACCESS ITEMS ────────────────────────────────────────
"blue"
"green"
//= NESTED LISTS WITH INDEXING ────────────────────────────────────────────
3
//= MIXED LIST‐INSIDE‐LIST ● INDEX VS ATTR ──────────────────────────────
"b"
//= LIST OF LISTS + INDEX OF LIST ────────────────────────────────────
[ [ $x: 5 ], [ $x: 7 ] ]
7
//= Out-of-bounds and weird list indices
[ 1, 2, 3 ]
error: list index out of range
    $list.0;
error: list index out of range
    $list.4;
error: list index out of range
    $list.-1;
error: can't use text as index
    $list."foo";
error: list index out of range
    $list.1.1;
//= List mutation
[ 1, 2 ]
[ 5, 2 ]
error: list index out of range
    $mutable.3 <: 9;
//= Trailing commas
[ 1, 2, 3 ]
error: double comma in list
    $badList1-index: [1,,2];
error: excess leading comma
    $badList2-index: [,1,2];
error: empty list with just a comma
    $badList3-index: [,];
//= Various type errors
"oops"
error: index applies to lists
    $notalist.1;

//= BINDING MATH OPERATIONS ────────────────────────────────────────────────
100
5
105
//= ARITHMETIC PRECEDENCE CHECK ─────────────────────────────────────────────
14
20
//= PARENTHESIZED EXPRESSIONS AS STAND‐ALONE ─────────────────────────────
15
//= LARGE NUMBERS + NEGATIVE NUMBERS ────────────────────────────────────
1234567890
-5
-10
0
error: double minus not allowed
    $weird: --5;

//= LIST MAPPING STUFF ───────────────────────────────────────────────────────────
[ $name: "Alice", $age: 30 ]
"Alice"
30
//= REBINDING LIST PROPERTIES ────────────────────────────────────────────
"Bob"
[ $name: "Bob", $age: 30 ]
//= ANOTHER LIST + PROPERTY REBIND ───────────────────────────────────────
[ $foo: 42, $bar: "hello" ]
"hello"
100
[ $foo: 100, $bar: "hello" ]
//= EMPTY LIST LITERAL + BAD PROP ACCESS ERROR ──────────────────────────
[  ]
error: list property not found: $someKey
    $emptyListMap.someKey;
//= NESTED LIST + MIXED INDEX/PROPERTY ───────────────────────────────────────
[ $inner: [ $val: 42, $arr: [ 10, 20 ] ] ]
42
20
//= REBINDING NESTED LISTS ───────────────────────────────────────────────
100
//= COMPLEX LIST + LIST INDEX/PROPERTY ACCESS ─────────────────────────
[ $list-map: [ $a: [ 100, 200 ], $b: "x" ], $list-index: [ [ $foo: 1 ], [ $foo: 2 ] ] ]
100
2
//= LIST OF LISTS + INDEX OF LIST ─────────────────────────────────────
[ $first: [ 1, 2 ], $second: [ 3, 4 ] ]
2
[ 3, 4 ]
//= MORE LIST WEIRDNESS
[ $x: [ $y: [ $z: 7 ] ] ]
7
//= List property errors
[ $foo: 1 ]
error: list property not found: $bar
    $list9.bar;
1
error: list property not found: $bar
    $list9.foo.bar;
999
error: list property not found: $someKey
    $prim.someKey <: 5;
[ $a: 1 ]
1
[ $x: 1 ]
99
[ $x: 99 ]
error: list property not found: $y
    $table-error.y <: 42;
//= Valid trailing commas (should succeed)
[ $foo: 1, $bar: 2 ]
//= invalid trailing commas (should error)
error: extra comma in list
    $badList1: [ $foo: 1,, $bar: 2 ];
error: excess leading comma
    $badList2: [ ,$foo: 1, $bar: 2 ];
error: empty list with just a comma
    $badList3: [ , ];

//= TEXT + INTERPOLATION ───────────────────────────────────────────────────
"rebinding this text and "
"this is text example 2"
"just a plain text"
"rebinding this text and this is text example 2"
100
5
"100 plus 5 is: 105"
//= NOW THAT $colors & $i ARE DEFINED, INTERPOLATE A STRING THAT USES THEM ─
2
[ "red", "purple", "green", "silver" ]
"color 2 is purple"
//= COMPLEX MATH INTERPOLATION ● MULTIPLE EXPRESSIONS ───────────────────
7
3
"Sum=10 Prod=21"
//= COMPOUND INTERPOLATION WITH LIST ACCESS ────────────────────────
[ $greeting: "hi", $nums: [ 2, 4 ] ]
"hi! The nums are:2, and 4"
//= Unicode and weird strings
"π≈3.14"
"foo\nbar"
"foo\"bar\"baz"
//= Interpolation errors
error: parse error in interpolation
    "text <bad syntax>";
error: parse error in interpolation
    "hello <$foo + >";
error: parse error in interpolation
    "hello <<$foo>>";

//= Empty function atom
//= Function atom with just a single value
6
//= Function atom with single variable and implicit return
99
//= Nested function atoms
6
9
//= Function atom one liner with implicit return
5
6
//= Function with only a return statement (multi-line)
123
//= Multiline function atom with explicit return
200
//= Multiline function atom with explicit return 2
201
//= Multiline nested function atoms
32
//= Single line, implicit return, named function
"this is the normal function invocation;"
4
"this is the $times2 style function invocation;"
4
"this is the $times2(); style function invocation"
4
//= Nameless function: multi-line with no explicit return (should error)
error: multi-line anonymous functions require explicit return
    ($x: 1;
 $y: 2;
 $x + $y;
);
//= Multi-line with params and default values
12
12
12

//= passing functions as references
12
9
error: too many args
    adder(4, 5, 6);
error: expected argument is a number atom, not a text atom
    $adder("", 500);
305
//= Named function with local variable
11
5

//= Subtraction with empty default
1
-1
error: missing necessary params
    subtractor();
error: missing necessary params
    $subtractor(4);

//= List of functions invoked by index
11
20

//= Named function, then function reference and direct invocation
10
6
error: expected function reference (@) or function invocation ($)
    double;

//= Higher-order function: passing function as argument and using default argument
8
14
error: expected function reference (@) or function invocation ($)
    apply(double, 4);

//= List with function member and self mutation
10
11
12
12
<function () multiline=True>
//= List of functions: referencing as variables
11
6
//= Nested function: inner function shadows param
17
27
//= Duplicate param name error in function declaration
error: duplicate parameter name '$x' in function definition
    param $x: 2;

//= Empty function declaration and invoked
//= Function with default param referencing previous param
10
4
12
//= List with a list of functions as a property
8
//= List function and interpolation with self behavior
"Hi, my name is ralph."
"I'm now spinning right."

//= Functions as members of lists
10
21

//= Function with numeric param name
4

//= Early exit
99

//= Function param name shadows outer variable
1

//= function atoms and pipes
6
11
12
16
20
15
20
30
10
100
5
50
20
10
12

//= Multiline function atom
10
15
20
30
40

//= PIPELINE ERROR: SHADOWING $this IS DISALLOWED
error: cannot declare variable '$this'
    $this: 7;
//= PIPELINE NEGATIVE NUMBER HANDLING
-10
-15

//= PIPELINE WITH TEXT INTERPOLATION
"Hello, World!"

//= PIPELINE WITH INTERPOLATION AND MATH
"double of 5 is 10"

//= PIPELINE WITH TABLE/LIST MANIPULATION
2

//= PIPELINE NESTED LIST ACCESS
30

//= PIPELINE TABLE PROPERTY
15
15

//= PIPELINE ERROR NO FUNCTION ATOM
error: pipeline expects function atom after `then`
    5 then 10;

//= PIPELINE ERROR EMPTY FUNCTION ATOM
//= Complex tests
24
25
25

//= Multi-line and params in named functions
12
15

//= NAMED FUNCTION: referencing $this is an error
error: can't use reserved $this keyname in named function declaration
    breaking2: (
